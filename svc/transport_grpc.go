// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: 5f7d5bf015
// Version Date: 2021-11-26T09:27:01Z

package svc

// This file provides server-side bindings for the gRPC transport.
// It utilizes the transport/grpc.Server.

import (
	"context"
	"net/http"

	"google.golang.org/grpc/metadata"

	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "github.com/mises-id/mises-airdropsvc/proto"
)

// MakeGRPCServer makes a set of endpoints available as a gRPC AirdropsvcServer.
func MakeGRPCServer(endpoints Endpoints, options ...grpctransport.ServerOption) pb.AirdropsvcServer {
	serverOptions := []grpctransport.ServerOption{
		grpctransport.ServerBefore(metadataToContext),
	}
	serverOptions = append(serverOptions, options...)
	return &grpcServer{
		// airdropsvc

		test: grpctransport.NewServer(
			endpoints.TestEndpoint,
			DecodeGRPCTestRequest,
			EncodeGRPCTestResponse,
			serverOptions...,
		),
		gettwitterauthurl: grpctransport.NewServer(
			endpoints.GetTwitterAuthUrlEndpoint,
			DecodeGRPCGetTwitterAuthUrlRequest,
			EncodeGRPCGetTwitterAuthUrlResponse,
			serverOptions...,
		),
		getairdropinfo: grpctransport.NewServer(
			endpoints.GetAirdropInfoEndpoint,
			DecodeGRPCGetAirdropInfoRequest,
			EncodeGRPCGetAirdropInfoResponse,
			serverOptions...,
		),
		twittercallback: grpctransport.NewServer(
			endpoints.TwitterCallbackEndpoint,
			DecodeGRPCTwitterCallbackRequest,
			EncodeGRPCTwitterCallbackResponse,
			serverOptions...,
		),
		twitterfollow: grpctransport.NewServer(
			endpoints.TwitterFollowEndpoint,
			DecodeGRPCTwitterFollowRequest,
			EncodeGRPCTwitterFollowResponse,
			serverOptions...,
		),
		lookuptwitter: grpctransport.NewServer(
			endpoints.LookupTwitterEndpoint,
			DecodeGRPCLookupTwitterRequest,
			EncodeGRPCLookupTwitterResponse,
			serverOptions...,
		),
		sendtweet: grpctransport.NewServer(
			endpoints.SendTweetEndpoint,
			DecodeGRPCSendTweetRequest,
			EncodeGRPCSendTweetResponse,
			serverOptions...,
		),
		checktwitteruser: grpctransport.NewServer(
			endpoints.CheckTwitterUserEndpoint,
			DecodeGRPCCheckTwitterUserRequest,
			EncodeGRPCCheckTwitterUserResponse,
			serverOptions...,
		),
		channelinfo: grpctransport.NewServer(
			endpoints.ChannelInfoEndpoint,
			DecodeGRPCChannelInfoRequest,
			EncodeGRPCChannelInfoResponse,
			serverOptions...,
		),
		pagechanneluser: grpctransport.NewServer(
			endpoints.PageChannelUserEndpoint,
			DecodeGRPCPageChannelUserRequest,
			EncodeGRPCPageChannelUserResponse,
			serverOptions...,
		),
		getchanneluser: grpctransport.NewServer(
			endpoints.GetChannelUserEndpoint,
			DecodeGRPCGetChannelUserRequest,
			EncodeGRPCGetChannelUserResponse,
			serverOptions...,
		),
		airdroptwitter: grpctransport.NewServer(
			endpoints.AirdropTwitterEndpoint,
			DecodeGRPCAirdropTwitterRequest,
			EncodeGRPCAirdropTwitterResponse,
			serverOptions...,
		),
		airdropchannel: grpctransport.NewServer(
			endpoints.AirdropChannelEndpoint,
			DecodeGRPCAirdropChannelRequest,
			EncodeGRPCAirdropChannelResponse,
			serverOptions...,
		),
	}
}

// grpcServer implements the AirdropsvcServer interface
type grpcServer struct {
	test              grpctransport.Handler
	gettwitterauthurl grpctransport.Handler
	getairdropinfo    grpctransport.Handler
	twittercallback   grpctransport.Handler
	twitterfollow     grpctransport.Handler
	lookuptwitter     grpctransport.Handler
	sendtweet         grpctransport.Handler
	checktwitteruser  grpctransport.Handler
	channelinfo       grpctransport.Handler
	pagechanneluser   grpctransport.Handler
	getchanneluser    grpctransport.Handler
	airdroptwitter    grpctransport.Handler
	airdropchannel    grpctransport.Handler
}

// Methods for grpcServer to implement AirdropsvcServer interface

func (s *grpcServer) Test(ctx context.Context, req *pb.TestRequest) (*pb.TestResponse, error) {
	_, rep, err := s.test.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.TestResponse), nil
}

func (s *grpcServer) GetTwitterAuthUrl(ctx context.Context, req *pb.GetTwitterAuthUrlRequest) (*pb.GetTwitterAuthUrlResponse, error) {
	_, rep, err := s.gettwitterauthurl.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.GetTwitterAuthUrlResponse), nil
}

func (s *grpcServer) GetAirdropInfo(ctx context.Context, req *pb.GetAirdropInfoRequest) (*pb.GetAirdropInfoResponse, error) {
	_, rep, err := s.getairdropinfo.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.GetAirdropInfoResponse), nil
}

func (s *grpcServer) TwitterCallback(ctx context.Context, req *pb.TwitterCallbackRequest) (*pb.TwitterCallbackResponse, error) {
	_, rep, err := s.twittercallback.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.TwitterCallbackResponse), nil
}

func (s *grpcServer) TwitterFollow(ctx context.Context, req *pb.TwitterFollowRequest) (*pb.TwitterFollowResponse, error) {
	_, rep, err := s.twitterfollow.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.TwitterFollowResponse), nil
}

func (s *grpcServer) LookupTwitter(ctx context.Context, req *pb.LookupTwitterRequest) (*pb.LookupTwitterResponse, error) {
	_, rep, err := s.lookuptwitter.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.LookupTwitterResponse), nil
}

func (s *grpcServer) SendTweet(ctx context.Context, req *pb.SendTweetRequest) (*pb.SendTweetResponse, error) {
	_, rep, err := s.sendtweet.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.SendTweetResponse), nil
}

func (s *grpcServer) CheckTwitterUser(ctx context.Context, req *pb.CheckTwitterUserRequest) (*pb.CheckTwitterUserResponse, error) {
	_, rep, err := s.checktwitteruser.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.CheckTwitterUserResponse), nil
}

func (s *grpcServer) ChannelInfo(ctx context.Context, req *pb.ChannelInfoRequest) (*pb.ChannelInfoResponse, error) {
	_, rep, err := s.channelinfo.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.ChannelInfoResponse), nil
}

func (s *grpcServer) PageChannelUser(ctx context.Context, req *pb.PageChannelUserRequest) (*pb.PageChannelUserResponse, error) {
	_, rep, err := s.pagechanneluser.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.PageChannelUserResponse), nil
}

func (s *grpcServer) GetChannelUser(ctx context.Context, req *pb.GetChannelUserRequest) (*pb.GetChannelUserResponse, error) {
	_, rep, err := s.getchanneluser.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.GetChannelUserResponse), nil
}

func (s *grpcServer) AirdropTwitter(ctx context.Context, req *pb.AirdropTwitterRequest) (*pb.AirdropTwitterResponse, error) {
	_, rep, err := s.airdroptwitter.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.AirdropTwitterResponse), nil
}

func (s *grpcServer) AirdropChannel(ctx context.Context, req *pb.AirdropChannelRequest) (*pb.AirdropChannelResponse, error) {
	_, rep, err := s.airdropchannel.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.AirdropChannelResponse), nil
}

// Server Decode

// DecodeGRPCTestRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC test request to a user-domain test request. Primarily useful in a server.
func DecodeGRPCTestRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.TestRequest)
	return req, nil
}

// DecodeGRPCGetTwitterAuthUrlRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC gettwitterauthurl request to a user-domain gettwitterauthurl request. Primarily useful in a server.
func DecodeGRPCGetTwitterAuthUrlRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.GetTwitterAuthUrlRequest)
	return req, nil
}

// DecodeGRPCGetAirdropInfoRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC getairdropinfo request to a user-domain getairdropinfo request. Primarily useful in a server.
func DecodeGRPCGetAirdropInfoRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.GetAirdropInfoRequest)
	return req, nil
}

// DecodeGRPCTwitterCallbackRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC twittercallback request to a user-domain twittercallback request. Primarily useful in a server.
func DecodeGRPCTwitterCallbackRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.TwitterCallbackRequest)
	return req, nil
}

// DecodeGRPCTwitterFollowRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC twitterfollow request to a user-domain twitterfollow request. Primarily useful in a server.
func DecodeGRPCTwitterFollowRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.TwitterFollowRequest)
	return req, nil
}

// DecodeGRPCLookupTwitterRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC lookuptwitter request to a user-domain lookuptwitter request. Primarily useful in a server.
func DecodeGRPCLookupTwitterRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.LookupTwitterRequest)
	return req, nil
}

// DecodeGRPCSendTweetRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC sendtweet request to a user-domain sendtweet request. Primarily useful in a server.
func DecodeGRPCSendTweetRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.SendTweetRequest)
	return req, nil
}

// DecodeGRPCCheckTwitterUserRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC checktwitteruser request to a user-domain checktwitteruser request. Primarily useful in a server.
func DecodeGRPCCheckTwitterUserRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.CheckTwitterUserRequest)
	return req, nil
}

// DecodeGRPCChannelInfoRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC channelinfo request to a user-domain channelinfo request. Primarily useful in a server.
func DecodeGRPCChannelInfoRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.ChannelInfoRequest)
	return req, nil
}

// DecodeGRPCPageChannelUserRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC pagechanneluser request to a user-domain pagechanneluser request. Primarily useful in a server.
func DecodeGRPCPageChannelUserRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.PageChannelUserRequest)
	return req, nil
}

// DecodeGRPCGetChannelUserRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC getchanneluser request to a user-domain getchanneluser request. Primarily useful in a server.
func DecodeGRPCGetChannelUserRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.GetChannelUserRequest)
	return req, nil
}

// DecodeGRPCAirdropTwitterRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC airdroptwitter request to a user-domain airdroptwitter request. Primarily useful in a server.
func DecodeGRPCAirdropTwitterRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.AirdropTwitterRequest)
	return req, nil
}

// DecodeGRPCAirdropChannelRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC airdropchannel request to a user-domain airdropchannel request. Primarily useful in a server.
func DecodeGRPCAirdropChannelRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.AirdropChannelRequest)
	return req, nil
}

// Server Encode

// EncodeGRPCTestResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain test response to a gRPC test reply. Primarily useful in a server.
func EncodeGRPCTestResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.TestResponse)
	return resp, nil
}

// EncodeGRPCGetTwitterAuthUrlResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain gettwitterauthurl response to a gRPC gettwitterauthurl reply. Primarily useful in a server.
func EncodeGRPCGetTwitterAuthUrlResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.GetTwitterAuthUrlResponse)
	return resp, nil
}

// EncodeGRPCGetAirdropInfoResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain getairdropinfo response to a gRPC getairdropinfo reply. Primarily useful in a server.
func EncodeGRPCGetAirdropInfoResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.GetAirdropInfoResponse)
	return resp, nil
}

// EncodeGRPCTwitterCallbackResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain twittercallback response to a gRPC twittercallback reply. Primarily useful in a server.
func EncodeGRPCTwitterCallbackResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.TwitterCallbackResponse)
	return resp, nil
}

// EncodeGRPCTwitterFollowResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain twitterfollow response to a gRPC twitterfollow reply. Primarily useful in a server.
func EncodeGRPCTwitterFollowResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.TwitterFollowResponse)
	return resp, nil
}

// EncodeGRPCLookupTwitterResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain lookuptwitter response to a gRPC lookuptwitter reply. Primarily useful in a server.
func EncodeGRPCLookupTwitterResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.LookupTwitterResponse)
	return resp, nil
}

// EncodeGRPCSendTweetResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain sendtweet response to a gRPC sendtweet reply. Primarily useful in a server.
func EncodeGRPCSendTweetResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.SendTweetResponse)
	return resp, nil
}

// EncodeGRPCCheckTwitterUserResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain checktwitteruser response to a gRPC checktwitteruser reply. Primarily useful in a server.
func EncodeGRPCCheckTwitterUserResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.CheckTwitterUserResponse)
	return resp, nil
}

// EncodeGRPCChannelInfoResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain channelinfo response to a gRPC channelinfo reply. Primarily useful in a server.
func EncodeGRPCChannelInfoResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.ChannelInfoResponse)
	return resp, nil
}

// EncodeGRPCPageChannelUserResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain pagechanneluser response to a gRPC pagechanneluser reply. Primarily useful in a server.
func EncodeGRPCPageChannelUserResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.PageChannelUserResponse)
	return resp, nil
}

// EncodeGRPCGetChannelUserResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain getchanneluser response to a gRPC getchanneluser reply. Primarily useful in a server.
func EncodeGRPCGetChannelUserResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.GetChannelUserResponse)
	return resp, nil
}

// EncodeGRPCAirdropTwitterResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain airdroptwitter response to a gRPC airdroptwitter reply. Primarily useful in a server.
func EncodeGRPCAirdropTwitterResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.AirdropTwitterResponse)
	return resp, nil
}

// EncodeGRPCAirdropChannelResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain airdropchannel response to a gRPC airdropchannel reply. Primarily useful in a server.
func EncodeGRPCAirdropChannelResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.AirdropChannelResponse)
	return resp, nil
}

// Helpers

func metadataToContext(ctx context.Context, md metadata.MD) context.Context {
	for k, v := range md {
		if v != nil {
			// The key is added both in metadata format (k) which is all lower
			// and the http.CanonicalHeaderKey of the key so that it can be
			// accessed in either format
			ctx = context.WithValue(ctx, k, v[0])
			ctx = context.WithValue(ctx, http.CanonicalHeaderKey(k), v[0])
		}
	}

	return ctx
}
