// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: 5f7d5bf015
// Version Date: 2021-11-26T09:27:01Z

// Package http provides an HTTP client for the Airdropsvc service.
package http

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/gogo/protobuf/jsonpb"

	"github.com/go-kit/kit/endpoint"
	httptransport "github.com/go-kit/kit/transport/http"
	"github.com/pkg/errors"

	// This Service
	pb "github.com/mises-id/mises-airdropsvc/proto"
	"github.com/mises-id/mises-airdropsvc/svc"
)

var (
	_ = endpoint.Chain
	_ = httptransport.NewClient
	_ = fmt.Sprint
	_ = bytes.Compare
	_ = ioutil.NopCloser
	_ = io.EOF
)

// New returns a service backed by an HTTP server living at the remote
// instance. We expect instance to come from a service discovery system, so
// likely of the form "host:port".
func New(instance string, options ...httptransport.ClientOption) (pb.AirdropsvcServer, error) {

	if !strings.HasPrefix(instance, "http") {
		instance = "http://" + instance
	}
	u, err := url.Parse(instance)
	if err != nil {
		return nil, err
	}
	_ = u

	var TestZeroEndpoint endpoint.Endpoint
	{
		TestZeroEndpoint = httptransport.NewClient(
			"GET",
			copyURL(u, "/test/"),
			EncodeHTTPTestZeroRequest,
			DecodeHTTPTestResponse,
			options...,
		).Endpoint()
	}
	var GetTwitterAuthUrlZeroEndpoint endpoint.Endpoint
	{
		GetTwitterAuthUrlZeroEndpoint = httptransport.NewClient(
			"GET",
			copyURL(u, "/twitter/auth_url/"),
			EncodeHTTPGetTwitterAuthUrlZeroRequest,
			DecodeHTTPGetTwitterAuthUrlResponse,
			options...,
		).Endpoint()
	}
	var GetAirdropInfoZeroEndpoint endpoint.Endpoint
	{
		GetAirdropInfoZeroEndpoint = httptransport.NewClient(
			"GET",
			copyURL(u, "/airdrop/info/"),
			EncodeHTTPGetAirdropInfoZeroRequest,
			DecodeHTTPGetAirdropInfoResponse,
			options...,
		).Endpoint()
	}
	var TwitterCallbackZeroEndpoint endpoint.Endpoint
	{
		TwitterCallbackZeroEndpoint = httptransport.NewClient(
			"GET",
			copyURL(u, "/twitter/callback/"),
			EncodeHTTPTwitterCallbackZeroRequest,
			DecodeHTTPTwitterCallbackResponse,
			options...,
		).Endpoint()
	}
	var TwitterFollowZeroEndpoint endpoint.Endpoint
	{
		TwitterFollowZeroEndpoint = httptransport.NewClient(
			"GET",
			copyURL(u, "/twitter/follow/"),
			EncodeHTTPTwitterFollowZeroRequest,
			DecodeHTTPTwitterFollowResponse,
			options...,
		).Endpoint()
	}
	var LookupTwitterZeroEndpoint endpoint.Endpoint
	{
		LookupTwitterZeroEndpoint = httptransport.NewClient(
			"GET",
			copyURL(u, "/twitter/lookup/"),
			EncodeHTTPLookupTwitterZeroRequest,
			DecodeHTTPLookupTwitterResponse,
			options...,
		).Endpoint()
	}
	var SendTweetZeroEndpoint endpoint.Endpoint
	{
		SendTweetZeroEndpoint = httptransport.NewClient(
			"GET",
			copyURL(u, "/twitter/send_tweet/"),
			EncodeHTTPSendTweetZeroRequest,
			DecodeHTTPSendTweetResponse,
			options...,
		).Endpoint()
	}
	var LikeTweetZeroEndpoint endpoint.Endpoint
	{
		LikeTweetZeroEndpoint = httptransport.NewClient(
			"GET",
			copyURL(u, "/twitter/like_tweet/"),
			EncodeHTTPLikeTweetZeroRequest,
			DecodeHTTPLikeTweetResponse,
			options...,
		).Endpoint()
	}
	var ReplyTweetZeroEndpoint endpoint.Endpoint
	{
		ReplyTweetZeroEndpoint = httptransport.NewClient(
			"GET",
			copyURL(u, "/twitter/reply_tweet/"),
			EncodeHTTPReplyTweetZeroRequest,
			DecodeHTTPReplyTweetResponse,
			options...,
		).Endpoint()
	}
	var CheckTwitterUserZeroEndpoint endpoint.Endpoint
	{
		CheckTwitterUserZeroEndpoint = httptransport.NewClient(
			"GET",
			copyURL(u, "/twitter/check_user/"),
			EncodeHTTPCheckTwitterUserZeroRequest,
			DecodeHTTPCheckTwitterUserResponse,
			options...,
		).Endpoint()
	}
	var ChannelInfoZeroEndpoint endpoint.Endpoint
	{
		ChannelInfoZeroEndpoint = httptransport.NewClient(
			"GET",
			copyURL(u, "/channel/info/"),
			EncodeHTTPChannelInfoZeroRequest,
			DecodeHTTPChannelInfoResponse,
			options...,
		).Endpoint()
	}
	var PageChannelUserZeroEndpoint endpoint.Endpoint
	{
		PageChannelUserZeroEndpoint = httptransport.NewClient(
			"GET",
			copyURL(u, "/channel_user/page/"),
			EncodeHTTPPageChannelUserZeroRequest,
			DecodeHTTPPageChannelUserResponse,
			options...,
		).Endpoint()
	}
	var GetChannelUserZeroEndpoint endpoint.Endpoint
	{
		GetChannelUserZeroEndpoint = httptransport.NewClient(
			"GET",
			copyURL(u, "/channel_user/"),
			EncodeHTTPGetChannelUserZeroRequest,
			DecodeHTTPGetChannelUserResponse,
			options...,
		).Endpoint()
	}
	var AirdropTwitterZeroEndpoint endpoint.Endpoint
	{
		AirdropTwitterZeroEndpoint = httptransport.NewClient(
			"GET",
			copyURL(u, "/airdrop/twitter/"),
			EncodeHTTPAirdropTwitterZeroRequest,
			DecodeHTTPAirdropTwitterResponse,
			options...,
		).Endpoint()
	}
	var AirdropChannelZeroEndpoint endpoint.Endpoint
	{
		AirdropChannelZeroEndpoint = httptransport.NewClient(
			"GET",
			copyURL(u, "/airdrop/channel/"),
			EncodeHTTPAirdropChannelZeroRequest,
			DecodeHTTPAirdropChannelResponse,
			options...,
		).Endpoint()
	}

	return svc.Endpoints{
		TestEndpoint:              TestZeroEndpoint,
		GetTwitterAuthUrlEndpoint: GetTwitterAuthUrlZeroEndpoint,
		GetAirdropInfoEndpoint:    GetAirdropInfoZeroEndpoint,
		TwitterCallbackEndpoint:   TwitterCallbackZeroEndpoint,
		TwitterFollowEndpoint:     TwitterFollowZeroEndpoint,
		LookupTwitterEndpoint:     LookupTwitterZeroEndpoint,
		SendTweetEndpoint:         SendTweetZeroEndpoint,
		LikeTweetEndpoint:         LikeTweetZeroEndpoint,
		ReplyTweetEndpoint:        ReplyTweetZeroEndpoint,
		CheckTwitterUserEndpoint:  CheckTwitterUserZeroEndpoint,
		ChannelInfoEndpoint:       ChannelInfoZeroEndpoint,
		PageChannelUserEndpoint:   PageChannelUserZeroEndpoint,
		GetChannelUserEndpoint:    GetChannelUserZeroEndpoint,
		AirdropTwitterEndpoint:    AirdropTwitterZeroEndpoint,
		AirdropChannelEndpoint:    AirdropChannelZeroEndpoint,
	}, nil
}

func copyURL(base *url.URL, path string) *url.URL {
	next := *base
	next.Path = path
	return &next
}

// CtxValuesToSend configures the http client to pull the specified keys out of
// the context and add them to the http request as headers.  Note that keys
// will have net/http.CanonicalHeaderKey called on them before being send over
// the wire and that is the form they will be available in the server context.
func CtxValuesToSend(keys ...string) httptransport.ClientOption {
	return httptransport.ClientBefore(func(ctx context.Context, r *http.Request) context.Context {
		for _, k := range keys {
			if v, ok := ctx.Value(k).(string); ok {
				r.Header.Set(k, v)
			}
		}
		return ctx
	})
}

// HTTP Client Decode

// DecodeHTTPTestResponse is a transport/http.DecodeResponseFunc that decodes
// a JSON-encoded TestResponse response from the HTTP response body.
// If the response has a non-200 status code, we will interpret that as an
// error and attempt to decode the specific error message from the response
// body. Primarily useful in a client.
func DecodeHTTPTestResponse(_ context.Context, r *http.Response) (interface{}, error) {
	defer r.Body.Close()
	buf, err := ioutil.ReadAll(r.Body)
	if err == io.EOF {
		return nil, errors.New("response http body empty")
	}
	if err != nil {
		return nil, errors.Wrap(err, "cannot read http body")
	}

	if r.StatusCode != http.StatusOK {
		return nil, errors.Wrapf(errorDecoder(buf), "status code: '%d'", r.StatusCode)
	}

	var resp pb.TestResponse
	if err = jsonpb.UnmarshalString(string(buf), &resp); err != nil {
		return nil, errorDecoder(buf)
	}

	return &resp, nil
}

// DecodeHTTPGetTwitterAuthUrlResponse is a transport/http.DecodeResponseFunc that decodes
// a JSON-encoded GetTwitterAuthUrlResponse response from the HTTP response body.
// If the response has a non-200 status code, we will interpret that as an
// error and attempt to decode the specific error message from the response
// body. Primarily useful in a client.
func DecodeHTTPGetTwitterAuthUrlResponse(_ context.Context, r *http.Response) (interface{}, error) {
	defer r.Body.Close()
	buf, err := ioutil.ReadAll(r.Body)
	if err == io.EOF {
		return nil, errors.New("response http body empty")
	}
	if err != nil {
		return nil, errors.Wrap(err, "cannot read http body")
	}

	if r.StatusCode != http.StatusOK {
		return nil, errors.Wrapf(errorDecoder(buf), "status code: '%d'", r.StatusCode)
	}

	var resp pb.GetTwitterAuthUrlResponse
	if err = jsonpb.UnmarshalString(string(buf), &resp); err != nil {
		return nil, errorDecoder(buf)
	}

	return &resp, nil
}

// DecodeHTTPGetAirdropInfoResponse is a transport/http.DecodeResponseFunc that decodes
// a JSON-encoded GetAirdropInfoResponse response from the HTTP response body.
// If the response has a non-200 status code, we will interpret that as an
// error and attempt to decode the specific error message from the response
// body. Primarily useful in a client.
func DecodeHTTPGetAirdropInfoResponse(_ context.Context, r *http.Response) (interface{}, error) {
	defer r.Body.Close()
	buf, err := ioutil.ReadAll(r.Body)
	if err == io.EOF {
		return nil, errors.New("response http body empty")
	}
	if err != nil {
		return nil, errors.Wrap(err, "cannot read http body")
	}

	if r.StatusCode != http.StatusOK {
		return nil, errors.Wrapf(errorDecoder(buf), "status code: '%d'", r.StatusCode)
	}

	var resp pb.GetAirdropInfoResponse
	if err = jsonpb.UnmarshalString(string(buf), &resp); err != nil {
		return nil, errorDecoder(buf)
	}

	return &resp, nil
}

// DecodeHTTPTwitterCallbackResponse is a transport/http.DecodeResponseFunc that decodes
// a JSON-encoded TwitterCallbackResponse response from the HTTP response body.
// If the response has a non-200 status code, we will interpret that as an
// error and attempt to decode the specific error message from the response
// body. Primarily useful in a client.
func DecodeHTTPTwitterCallbackResponse(_ context.Context, r *http.Response) (interface{}, error) {
	defer r.Body.Close()
	buf, err := ioutil.ReadAll(r.Body)
	if err == io.EOF {
		return nil, errors.New("response http body empty")
	}
	if err != nil {
		return nil, errors.Wrap(err, "cannot read http body")
	}

	if r.StatusCode != http.StatusOK {
		return nil, errors.Wrapf(errorDecoder(buf), "status code: '%d'", r.StatusCode)
	}

	var resp pb.TwitterCallbackResponse
	if err = jsonpb.UnmarshalString(string(buf), &resp); err != nil {
		return nil, errorDecoder(buf)
	}

	return &resp, nil
}

// DecodeHTTPTwitterFollowResponse is a transport/http.DecodeResponseFunc that decodes
// a JSON-encoded TwitterFollowResponse response from the HTTP response body.
// If the response has a non-200 status code, we will interpret that as an
// error and attempt to decode the specific error message from the response
// body. Primarily useful in a client.
func DecodeHTTPTwitterFollowResponse(_ context.Context, r *http.Response) (interface{}, error) {
	defer r.Body.Close()
	buf, err := ioutil.ReadAll(r.Body)
	if err == io.EOF {
		return nil, errors.New("response http body empty")
	}
	if err != nil {
		return nil, errors.Wrap(err, "cannot read http body")
	}

	if r.StatusCode != http.StatusOK {
		return nil, errors.Wrapf(errorDecoder(buf), "status code: '%d'", r.StatusCode)
	}

	var resp pb.TwitterFollowResponse
	if err = jsonpb.UnmarshalString(string(buf), &resp); err != nil {
		return nil, errorDecoder(buf)
	}

	return &resp, nil
}

// DecodeHTTPLookupTwitterResponse is a transport/http.DecodeResponseFunc that decodes
// a JSON-encoded LookupTwitterResponse response from the HTTP response body.
// If the response has a non-200 status code, we will interpret that as an
// error and attempt to decode the specific error message from the response
// body. Primarily useful in a client.
func DecodeHTTPLookupTwitterResponse(_ context.Context, r *http.Response) (interface{}, error) {
	defer r.Body.Close()
	buf, err := ioutil.ReadAll(r.Body)
	if err == io.EOF {
		return nil, errors.New("response http body empty")
	}
	if err != nil {
		return nil, errors.Wrap(err, "cannot read http body")
	}

	if r.StatusCode != http.StatusOK {
		return nil, errors.Wrapf(errorDecoder(buf), "status code: '%d'", r.StatusCode)
	}

	var resp pb.LookupTwitterResponse
	if err = jsonpb.UnmarshalString(string(buf), &resp); err != nil {
		return nil, errorDecoder(buf)
	}

	return &resp, nil
}

// DecodeHTTPSendTweetResponse is a transport/http.DecodeResponseFunc that decodes
// a JSON-encoded SendTweetResponse response from the HTTP response body.
// If the response has a non-200 status code, we will interpret that as an
// error and attempt to decode the specific error message from the response
// body. Primarily useful in a client.
func DecodeHTTPSendTweetResponse(_ context.Context, r *http.Response) (interface{}, error) {
	defer r.Body.Close()
	buf, err := ioutil.ReadAll(r.Body)
	if err == io.EOF {
		return nil, errors.New("response http body empty")
	}
	if err != nil {
		return nil, errors.Wrap(err, "cannot read http body")
	}

	if r.StatusCode != http.StatusOK {
		return nil, errors.Wrapf(errorDecoder(buf), "status code: '%d'", r.StatusCode)
	}

	var resp pb.SendTweetResponse
	if err = jsonpb.UnmarshalString(string(buf), &resp); err != nil {
		return nil, errorDecoder(buf)
	}

	return &resp, nil
}

// DecodeHTTPLikeTweetResponse is a transport/http.DecodeResponseFunc that decodes
// a JSON-encoded LikeTweetResponse response from the HTTP response body.
// If the response has a non-200 status code, we will interpret that as an
// error and attempt to decode the specific error message from the response
// body. Primarily useful in a client.
func DecodeHTTPLikeTweetResponse(_ context.Context, r *http.Response) (interface{}, error) {
	defer r.Body.Close()
	buf, err := ioutil.ReadAll(r.Body)
	if err == io.EOF {
		return nil, errors.New("response http body empty")
	}
	if err != nil {
		return nil, errors.Wrap(err, "cannot read http body")
	}

	if r.StatusCode != http.StatusOK {
		return nil, errors.Wrapf(errorDecoder(buf), "status code: '%d'", r.StatusCode)
	}

	var resp pb.LikeTweetResponse
	if err = jsonpb.UnmarshalString(string(buf), &resp); err != nil {
		return nil, errorDecoder(buf)
	}

	return &resp, nil
}

// DecodeHTTPReplyTweetResponse is a transport/http.DecodeResponseFunc that decodes
// a JSON-encoded ReplyTweetResponse response from the HTTP response body.
// If the response has a non-200 status code, we will interpret that as an
// error and attempt to decode the specific error message from the response
// body. Primarily useful in a client.
func DecodeHTTPReplyTweetResponse(_ context.Context, r *http.Response) (interface{}, error) {
	defer r.Body.Close()
	buf, err := ioutil.ReadAll(r.Body)
	if err == io.EOF {
		return nil, errors.New("response http body empty")
	}
	if err != nil {
		return nil, errors.Wrap(err, "cannot read http body")
	}

	if r.StatusCode != http.StatusOK {
		return nil, errors.Wrapf(errorDecoder(buf), "status code: '%d'", r.StatusCode)
	}

	var resp pb.ReplyTweetResponse
	if err = jsonpb.UnmarshalString(string(buf), &resp); err != nil {
		return nil, errorDecoder(buf)
	}

	return &resp, nil
}

// DecodeHTTPCheckTwitterUserResponse is a transport/http.DecodeResponseFunc that decodes
// a JSON-encoded CheckTwitterUserResponse response from the HTTP response body.
// If the response has a non-200 status code, we will interpret that as an
// error and attempt to decode the specific error message from the response
// body. Primarily useful in a client.
func DecodeHTTPCheckTwitterUserResponse(_ context.Context, r *http.Response) (interface{}, error) {
	defer r.Body.Close()
	buf, err := ioutil.ReadAll(r.Body)
	if err == io.EOF {
		return nil, errors.New("response http body empty")
	}
	if err != nil {
		return nil, errors.Wrap(err, "cannot read http body")
	}

	if r.StatusCode != http.StatusOK {
		return nil, errors.Wrapf(errorDecoder(buf), "status code: '%d'", r.StatusCode)
	}

	var resp pb.CheckTwitterUserResponse
	if err = jsonpb.UnmarshalString(string(buf), &resp); err != nil {
		return nil, errorDecoder(buf)
	}

	return &resp, nil
}

// DecodeHTTPChannelInfoResponse is a transport/http.DecodeResponseFunc that decodes
// a JSON-encoded ChannelInfoResponse response from the HTTP response body.
// If the response has a non-200 status code, we will interpret that as an
// error and attempt to decode the specific error message from the response
// body. Primarily useful in a client.
func DecodeHTTPChannelInfoResponse(_ context.Context, r *http.Response) (interface{}, error) {
	defer r.Body.Close()
	buf, err := ioutil.ReadAll(r.Body)
	if err == io.EOF {
		return nil, errors.New("response http body empty")
	}
	if err != nil {
		return nil, errors.Wrap(err, "cannot read http body")
	}

	if r.StatusCode != http.StatusOK {
		return nil, errors.Wrapf(errorDecoder(buf), "status code: '%d'", r.StatusCode)
	}

	var resp pb.ChannelInfoResponse
	if err = jsonpb.UnmarshalString(string(buf), &resp); err != nil {
		return nil, errorDecoder(buf)
	}

	return &resp, nil
}

// DecodeHTTPPageChannelUserResponse is a transport/http.DecodeResponseFunc that decodes
// a JSON-encoded PageChannelUserResponse response from the HTTP response body.
// If the response has a non-200 status code, we will interpret that as an
// error and attempt to decode the specific error message from the response
// body. Primarily useful in a client.
func DecodeHTTPPageChannelUserResponse(_ context.Context, r *http.Response) (interface{}, error) {
	defer r.Body.Close()
	buf, err := ioutil.ReadAll(r.Body)
	if err == io.EOF {
		return nil, errors.New("response http body empty")
	}
	if err != nil {
		return nil, errors.Wrap(err, "cannot read http body")
	}

	if r.StatusCode != http.StatusOK {
		return nil, errors.Wrapf(errorDecoder(buf), "status code: '%d'", r.StatusCode)
	}

	var resp pb.PageChannelUserResponse
	if err = jsonpb.UnmarshalString(string(buf), &resp); err != nil {
		return nil, errorDecoder(buf)
	}

	return &resp, nil
}

// DecodeHTTPGetChannelUserResponse is a transport/http.DecodeResponseFunc that decodes
// a JSON-encoded GetChannelUserResponse response from the HTTP response body.
// If the response has a non-200 status code, we will interpret that as an
// error and attempt to decode the specific error message from the response
// body. Primarily useful in a client.
func DecodeHTTPGetChannelUserResponse(_ context.Context, r *http.Response) (interface{}, error) {
	defer r.Body.Close()
	buf, err := ioutil.ReadAll(r.Body)
	if err == io.EOF {
		return nil, errors.New("response http body empty")
	}
	if err != nil {
		return nil, errors.Wrap(err, "cannot read http body")
	}

	if r.StatusCode != http.StatusOK {
		return nil, errors.Wrapf(errorDecoder(buf), "status code: '%d'", r.StatusCode)
	}

	var resp pb.GetChannelUserResponse
	if err = jsonpb.UnmarshalString(string(buf), &resp); err != nil {
		return nil, errorDecoder(buf)
	}

	return &resp, nil
}

// DecodeHTTPAirdropTwitterResponse is a transport/http.DecodeResponseFunc that decodes
// a JSON-encoded AirdropTwitterResponse response from the HTTP response body.
// If the response has a non-200 status code, we will interpret that as an
// error and attempt to decode the specific error message from the response
// body. Primarily useful in a client.
func DecodeHTTPAirdropTwitterResponse(_ context.Context, r *http.Response) (interface{}, error) {
	defer r.Body.Close()
	buf, err := ioutil.ReadAll(r.Body)
	if err == io.EOF {
		return nil, errors.New("response http body empty")
	}
	if err != nil {
		return nil, errors.Wrap(err, "cannot read http body")
	}

	if r.StatusCode != http.StatusOK {
		return nil, errors.Wrapf(errorDecoder(buf), "status code: '%d'", r.StatusCode)
	}

	var resp pb.AirdropTwitterResponse
	if err = jsonpb.UnmarshalString(string(buf), &resp); err != nil {
		return nil, errorDecoder(buf)
	}

	return &resp, nil
}

// DecodeHTTPAirdropChannelResponse is a transport/http.DecodeResponseFunc that decodes
// a JSON-encoded AirdropChannelResponse response from the HTTP response body.
// If the response has a non-200 status code, we will interpret that as an
// error and attempt to decode the specific error message from the response
// body. Primarily useful in a client.
func DecodeHTTPAirdropChannelResponse(_ context.Context, r *http.Response) (interface{}, error) {
	defer r.Body.Close()
	buf, err := ioutil.ReadAll(r.Body)
	if err == io.EOF {
		return nil, errors.New("response http body empty")
	}
	if err != nil {
		return nil, errors.Wrap(err, "cannot read http body")
	}

	if r.StatusCode != http.StatusOK {
		return nil, errors.Wrapf(errorDecoder(buf), "status code: '%d'", r.StatusCode)
	}

	var resp pb.AirdropChannelResponse
	if err = jsonpb.UnmarshalString(string(buf), &resp); err != nil {
		return nil, errorDecoder(buf)
	}

	return &resp, nil
}

// HTTP Client Encode

// EncodeHTTPTestZeroRequest is a transport/http.EncodeRequestFunc
// that encodes a test request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPTestZeroRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.TestRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"test",
		"",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	r.URL.RawQuery = values.Encode()
	return nil
}

// EncodeHTTPTestOneRequest is a transport/http.EncodeRequestFunc
// that encodes a test request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPTestOneRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.TestRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"test",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	r.URL.RawQuery = values.Encode()
	return nil
}

// EncodeHTTPGetTwitterAuthUrlZeroRequest is a transport/http.EncodeRequestFunc
// that encodes a gettwitterauthurl request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPGetTwitterAuthUrlZeroRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.GetTwitterAuthUrlRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"twitter",
		"auth_url",
		"",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	values.Add("current_uid", fmt.Sprint(req.CurrentUid))

	tmp, err = json.Marshal(req.UserAgent)
	if err != nil {
		return errors.Wrap(err, "failed to marshal req.UserAgent")
	}
	strval = string(tmp)
	values.Add("user_agent", strval)

	r.URL.RawQuery = values.Encode()
	return nil
}

// EncodeHTTPGetTwitterAuthUrlOneRequest is a transport/http.EncodeRequestFunc
// that encodes a gettwitterauthurl request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPGetTwitterAuthUrlOneRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.GetTwitterAuthUrlRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"twitter",
		"auth_url",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	values.Add("current_uid", fmt.Sprint(req.CurrentUid))

	tmp, err = json.Marshal(req.UserAgent)
	if err != nil {
		return errors.Wrap(err, "failed to marshal req.UserAgent")
	}
	strval = string(tmp)
	values.Add("user_agent", strval)

	r.URL.RawQuery = values.Encode()
	return nil
}

// EncodeHTTPGetAirdropInfoZeroRequest is a transport/http.EncodeRequestFunc
// that encodes a getairdropinfo request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPGetAirdropInfoZeroRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.GetAirdropInfoRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"airdrop",
		"info",
		"",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	values.Add("current_uid", fmt.Sprint(req.CurrentUid))

	r.URL.RawQuery = values.Encode()
	return nil
}

// EncodeHTTPGetAirdropInfoOneRequest is a transport/http.EncodeRequestFunc
// that encodes a getairdropinfo request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPGetAirdropInfoOneRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.GetAirdropInfoRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"airdrop",
		"info",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	values.Add("current_uid", fmt.Sprint(req.CurrentUid))

	r.URL.RawQuery = values.Encode()
	return nil
}

// EncodeHTTPTwitterCallbackZeroRequest is a transport/http.EncodeRequestFunc
// that encodes a twittercallback request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPTwitterCallbackZeroRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.TwitterCallbackRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"twitter",
		"callback",
		"",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	values.Add("current_uid", fmt.Sprint(req.CurrentUid))

	values.Add("oauth_token", fmt.Sprint(req.OauthToken))

	values.Add("oauth_verifier", fmt.Sprint(req.OauthVerifier))

	tmp, err = json.Marshal(req.UserAgent)
	if err != nil {
		return errors.Wrap(err, "failed to marshal req.UserAgent")
	}
	strval = string(tmp)
	values.Add("user_agent", strval)

	values.Add("state", fmt.Sprint(req.State))

	r.URL.RawQuery = values.Encode()
	return nil
}

// EncodeHTTPTwitterCallbackOneRequest is a transport/http.EncodeRequestFunc
// that encodes a twittercallback request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPTwitterCallbackOneRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.TwitterCallbackRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"twitter",
		"callback",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	values.Add("current_uid", fmt.Sprint(req.CurrentUid))

	values.Add("oauth_token", fmt.Sprint(req.OauthToken))

	values.Add("oauth_verifier", fmt.Sprint(req.OauthVerifier))

	tmp, err = json.Marshal(req.UserAgent)
	if err != nil {
		return errors.Wrap(err, "failed to marshal req.UserAgent")
	}
	strval = string(tmp)
	values.Add("user_agent", strval)

	values.Add("state", fmt.Sprint(req.State))

	r.URL.RawQuery = values.Encode()
	return nil
}

// EncodeHTTPTwitterFollowZeroRequest is a transport/http.EncodeRequestFunc
// that encodes a twitterfollow request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPTwitterFollowZeroRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.TwitterFollowRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"twitter",
		"follow",
		"",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	values.Add("name", fmt.Sprint(req.Name))

	r.URL.RawQuery = values.Encode()
	return nil
}

// EncodeHTTPTwitterFollowOneRequest is a transport/http.EncodeRequestFunc
// that encodes a twitterfollow request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPTwitterFollowOneRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.TwitterFollowRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"twitter",
		"follow",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	values.Add("name", fmt.Sprint(req.Name))

	r.URL.RawQuery = values.Encode()
	return nil
}

// EncodeHTTPLookupTwitterZeroRequest is a transport/http.EncodeRequestFunc
// that encodes a lookuptwitter request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPLookupTwitterZeroRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.LookupTwitterRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"twitter",
		"lookup",
		"",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	r.URL.RawQuery = values.Encode()
	return nil
}

// EncodeHTTPLookupTwitterOneRequest is a transport/http.EncodeRequestFunc
// that encodes a lookuptwitter request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPLookupTwitterOneRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.LookupTwitterRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"twitter",
		"lookup",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	r.URL.RawQuery = values.Encode()
	return nil
}

// EncodeHTTPSendTweetZeroRequest is a transport/http.EncodeRequestFunc
// that encodes a sendtweet request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPSendTweetZeroRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.SendTweetRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"twitter",
		"send_tweet",
		"",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	values.Add("name", fmt.Sprint(req.Name))

	r.URL.RawQuery = values.Encode()
	return nil
}

// EncodeHTTPSendTweetOneRequest is a transport/http.EncodeRequestFunc
// that encodes a sendtweet request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPSendTweetOneRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.SendTweetRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"twitter",
		"send_tweet",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	values.Add("name", fmt.Sprint(req.Name))

	r.URL.RawQuery = values.Encode()
	return nil
}

// EncodeHTTPLikeTweetZeroRequest is a transport/http.EncodeRequestFunc
// that encodes a liketweet request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPLikeTweetZeroRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.LikeTweetRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"twitter",
		"like_tweet",
		"",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	r.URL.RawQuery = values.Encode()
	return nil
}

// EncodeHTTPLikeTweetOneRequest is a transport/http.EncodeRequestFunc
// that encodes a liketweet request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPLikeTweetOneRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.LikeTweetRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"twitter",
		"like_tweet",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	r.URL.RawQuery = values.Encode()
	return nil
}

// EncodeHTTPReplyTweetZeroRequest is a transport/http.EncodeRequestFunc
// that encodes a replytweet request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPReplyTweetZeroRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.ReplyTweetRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"twitter",
		"reply_tweet",
		"",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	r.URL.RawQuery = values.Encode()
	return nil
}

// EncodeHTTPReplyTweetOneRequest is a transport/http.EncodeRequestFunc
// that encodes a replytweet request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPReplyTweetOneRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.ReplyTweetRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"twitter",
		"reply_tweet",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	r.URL.RawQuery = values.Encode()
	return nil
}

// EncodeHTTPCheckTwitterUserZeroRequest is a transport/http.EncodeRequestFunc
// that encodes a checktwitteruser request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPCheckTwitterUserZeroRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.CheckTwitterUserRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"twitter",
		"check_user",
		"",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	r.URL.RawQuery = values.Encode()
	return nil
}

// EncodeHTTPCheckTwitterUserOneRequest is a transport/http.EncodeRequestFunc
// that encodes a checktwitteruser request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPCheckTwitterUserOneRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.CheckTwitterUserRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"twitter",
		"check_user",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	r.URL.RawQuery = values.Encode()
	return nil
}

// EncodeHTTPChannelInfoZeroRequest is a transport/http.EncodeRequestFunc
// that encodes a channelinfo request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPChannelInfoZeroRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.ChannelInfoRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"channel",
		"info",
		"",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	values.Add("misesid", fmt.Sprint(req.Misesid))

	values.Add("type", fmt.Sprint(req.Type))

	values.Add("medium", fmt.Sprint(req.Medium))

	r.URL.RawQuery = values.Encode()
	return nil
}

// EncodeHTTPChannelInfoOneRequest is a transport/http.EncodeRequestFunc
// that encodes a channelinfo request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPChannelInfoOneRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.ChannelInfoRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"channel",
		"info",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	values.Add("misesid", fmt.Sprint(req.Misesid))

	values.Add("type", fmt.Sprint(req.Type))

	values.Add("medium", fmt.Sprint(req.Medium))

	r.URL.RawQuery = values.Encode()
	return nil
}

// EncodeHTTPPageChannelUserZeroRequest is a transport/http.EncodeRequestFunc
// that encodes a pagechanneluser request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPPageChannelUserZeroRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.PageChannelUserRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"channel_user",
		"page",
		"",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	values.Add("misesid", fmt.Sprint(req.Misesid))

	tmp, err = json.Marshal(req.Paginator)
	if err != nil {
		return errors.Wrap(err, "failed to marshal req.Paginator")
	}
	strval = string(tmp)
	values.Add("paginator", strval)

	r.URL.RawQuery = values.Encode()
	return nil
}

// EncodeHTTPPageChannelUserOneRequest is a transport/http.EncodeRequestFunc
// that encodes a pagechanneluser request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPPageChannelUserOneRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.PageChannelUserRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"channel_user",
		"page",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	values.Add("misesid", fmt.Sprint(req.Misesid))

	tmp, err = json.Marshal(req.Paginator)
	if err != nil {
		return errors.Wrap(err, "failed to marshal req.Paginator")
	}
	strval = string(tmp)
	values.Add("paginator", strval)

	r.URL.RawQuery = values.Encode()
	return nil
}

// EncodeHTTPGetChannelUserZeroRequest is a transport/http.EncodeRequestFunc
// that encodes a getchanneluser request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPGetChannelUserZeroRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.GetChannelUserRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"channel_user",
		"",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	values.Add("misesid", fmt.Sprint(req.Misesid))

	r.URL.RawQuery = values.Encode()
	return nil
}

// EncodeHTTPGetChannelUserOneRequest is a transport/http.EncodeRequestFunc
// that encodes a getchanneluser request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPGetChannelUserOneRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.GetChannelUserRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"channel_user",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	values.Add("misesid", fmt.Sprint(req.Misesid))

	r.URL.RawQuery = values.Encode()
	return nil
}

// EncodeHTTPAirdropTwitterZeroRequest is a transport/http.EncodeRequestFunc
// that encodes a airdroptwitter request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPAirdropTwitterZeroRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.AirdropTwitterRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"airdrop",
		"twitter",
		"",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	values.Add("misesid", fmt.Sprint(req.Misesid))

	r.URL.RawQuery = values.Encode()
	return nil
}

// EncodeHTTPAirdropTwitterOneRequest is a transport/http.EncodeRequestFunc
// that encodes a airdroptwitter request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPAirdropTwitterOneRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.AirdropTwitterRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"airdrop",
		"twitter",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	values.Add("misesid", fmt.Sprint(req.Misesid))

	r.URL.RawQuery = values.Encode()
	return nil
}

// EncodeHTTPAirdropChannelZeroRequest is a transport/http.EncodeRequestFunc
// that encodes a airdropchannel request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPAirdropChannelZeroRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.AirdropChannelRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"airdrop",
		"channel",
		"",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	r.URL.RawQuery = values.Encode()
	return nil
}

// EncodeHTTPAirdropChannelOneRequest is a transport/http.EncodeRequestFunc
// that encodes a airdropchannel request into the various portions of
// the http request (path, query, and body).
func EncodeHTTPAirdropChannelOneRequest(_ context.Context, r *http.Request, request interface{}) error {
	strval := ""
	_ = strval
	req := request.(*pb.AirdropChannelRequest)
	_ = req

	r.Header.Set("transport", "HTTPJSON")
	r.Header.Set("request-url", r.URL.Path)

	// Set the path parameters
	path := strings.Join([]string{
		"",
		"airdrop",
		"channel",
	}, "/")
	u, err := url.Parse(path)
	if err != nil {
		return errors.Wrapf(err, "couldn't unmarshal path %q", path)
	}
	r.URL.RawPath = u.RawPath
	r.URL.Path = u.Path

	// Set the query parameters
	values := r.URL.Query()
	var tmp []byte
	_ = tmp

	r.URL.RawQuery = values.Encode()
	return nil
}

func errorDecoder(buf []byte) error {
	var w errorWrapper
	if err := json.Unmarshal(buf, &w); err != nil {
		const size = 8196
		if len(buf) > size {
			buf = buf[:size]
		}
		return fmt.Errorf("response body '%s': cannot parse non-json request body", buf)
	}

	return errors.New(w.Error)
}

type errorWrapper struct {
	Error string `json:"error"`
}
