// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: 5f7d5bf015
// Version Date: 2021-11-26T09:27:01Z

// Package grpc provides a gRPC client for the Airdropsvc service.
package grpc

import (
	"context"
	"github.com/pkg/errors"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"

	"github.com/go-kit/kit/endpoint"
	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "github.com/mises-id/mises-airdropsvc/proto"
	"github.com/mises-id/mises-airdropsvc/svc"
)

// New returns an service backed by a gRPC client connection. It is the
// responsibility of the caller to dial, and later close, the connection.
func New(conn *grpc.ClientConn, options ...ClientOption) (pb.AirdropsvcServer, error) {
	var cc clientConfig

	for _, f := range options {
		err := f(&cc)
		if err != nil {
			return nil, errors.Wrap(err, "cannot apply option")
		}
	}

	clientOptions := []grpctransport.ClientOption{
		grpctransport.ClientBefore(
			contextValuesToGRPCMetadata(cc.headers)),
	}
	var testEndpoint endpoint.Endpoint
	{
		testEndpoint = grpctransport.NewClient(
			conn,
			"airdropsvc.Airdropsvc",
			"Test",
			EncodeGRPCTestRequest,
			DecodeGRPCTestResponse,
			pb.TestResponse{},
			clientOptions...,
		).Endpoint()
	}

	var gettwitterauthurlEndpoint endpoint.Endpoint
	{
		gettwitterauthurlEndpoint = grpctransport.NewClient(
			conn,
			"airdropsvc.Airdropsvc",
			"GetTwitterAuthUrl",
			EncodeGRPCGetTwitterAuthUrlRequest,
			DecodeGRPCGetTwitterAuthUrlResponse,
			pb.GetTwitterAuthUrlResponse{},
			clientOptions...,
		).Endpoint()
	}

	var getairdropinfoEndpoint endpoint.Endpoint
	{
		getairdropinfoEndpoint = grpctransport.NewClient(
			conn,
			"airdropsvc.Airdropsvc",
			"GetAirdropInfo",
			EncodeGRPCGetAirdropInfoRequest,
			DecodeGRPCGetAirdropInfoResponse,
			pb.GetAirdropInfoResponse{},
			clientOptions...,
		).Endpoint()
	}

	var twittercallbackEndpoint endpoint.Endpoint
	{
		twittercallbackEndpoint = grpctransport.NewClient(
			conn,
			"airdropsvc.Airdropsvc",
			"TwitterCallback",
			EncodeGRPCTwitterCallbackRequest,
			DecodeGRPCTwitterCallbackResponse,
			pb.TwitterCallbackResponse{},
			clientOptions...,
		).Endpoint()
	}

	var twitterfollowEndpoint endpoint.Endpoint
	{
		twitterfollowEndpoint = grpctransport.NewClient(
			conn,
			"airdropsvc.Airdropsvc",
			"TwitterFollow",
			EncodeGRPCTwitterFollowRequest,
			DecodeGRPCTwitterFollowResponse,
			pb.TwitterFollowResponse{},
			clientOptions...,
		).Endpoint()
	}

	var lookuptwitterEndpoint endpoint.Endpoint
	{
		lookuptwitterEndpoint = grpctransport.NewClient(
			conn,
			"airdropsvc.Airdropsvc",
			"LookupTwitter",
			EncodeGRPCLookupTwitterRequest,
			DecodeGRPCLookupTwitterResponse,
			pb.LookupTwitterResponse{},
			clientOptions...,
		).Endpoint()
	}

	var sendtweetEndpoint endpoint.Endpoint
	{
		sendtweetEndpoint = grpctransport.NewClient(
			conn,
			"airdropsvc.Airdropsvc",
			"SendTweet",
			EncodeGRPCSendTweetRequest,
			DecodeGRPCSendTweetResponse,
			pb.SendTweetResponse{},
			clientOptions...,
		).Endpoint()
	}

	var checktwitteruserEndpoint endpoint.Endpoint
	{
		checktwitteruserEndpoint = grpctransport.NewClient(
			conn,
			"airdropsvc.Airdropsvc",
			"CheckTwitterUser",
			EncodeGRPCCheckTwitterUserRequest,
			DecodeGRPCCheckTwitterUserResponse,
			pb.CheckTwitterUserResponse{},
			clientOptions...,
		).Endpoint()
	}

	var channelinfoEndpoint endpoint.Endpoint
	{
		channelinfoEndpoint = grpctransport.NewClient(
			conn,
			"airdropsvc.Airdropsvc",
			"ChannelInfo",
			EncodeGRPCChannelInfoRequest,
			DecodeGRPCChannelInfoResponse,
			pb.ChannelInfoResponse{},
			clientOptions...,
		).Endpoint()
	}

	var pagechanneluserEndpoint endpoint.Endpoint
	{
		pagechanneluserEndpoint = grpctransport.NewClient(
			conn,
			"airdropsvc.Airdropsvc",
			"PageChannelUser",
			EncodeGRPCPageChannelUserRequest,
			DecodeGRPCPageChannelUserResponse,
			pb.PageChannelUserResponse{},
			clientOptions...,
		).Endpoint()
	}

	var getchanneluserEndpoint endpoint.Endpoint
	{
		getchanneluserEndpoint = grpctransport.NewClient(
			conn,
			"airdropsvc.Airdropsvc",
			"GetChannelUser",
			EncodeGRPCGetChannelUserRequest,
			DecodeGRPCGetChannelUserResponse,
			pb.GetChannelUserResponse{},
			clientOptions...,
		).Endpoint()
	}

	var airdroptwitterEndpoint endpoint.Endpoint
	{
		airdroptwitterEndpoint = grpctransport.NewClient(
			conn,
			"airdropsvc.Airdropsvc",
			"AirdropTwitter",
			EncodeGRPCAirdropTwitterRequest,
			DecodeGRPCAirdropTwitterResponse,
			pb.AirdropTwitterResponse{},
			clientOptions...,
		).Endpoint()
	}

	var airdropchannelEndpoint endpoint.Endpoint
	{
		airdropchannelEndpoint = grpctransport.NewClient(
			conn,
			"airdropsvc.Airdropsvc",
			"AirdropChannel",
			EncodeGRPCAirdropChannelRequest,
			DecodeGRPCAirdropChannelResponse,
			pb.AirdropChannelResponse{},
			clientOptions...,
		).Endpoint()
	}

	return svc.Endpoints{
		TestEndpoint:              testEndpoint,
		GetTwitterAuthUrlEndpoint: gettwitterauthurlEndpoint,
		GetAirdropInfoEndpoint:    getairdropinfoEndpoint,
		TwitterCallbackEndpoint:   twittercallbackEndpoint,
		TwitterFollowEndpoint:     twitterfollowEndpoint,
		LookupTwitterEndpoint:     lookuptwitterEndpoint,
		SendTweetEndpoint:         sendtweetEndpoint,
		CheckTwitterUserEndpoint:  checktwitteruserEndpoint,
		ChannelInfoEndpoint:       channelinfoEndpoint,
		PageChannelUserEndpoint:   pagechanneluserEndpoint,
		GetChannelUserEndpoint:    getchanneluserEndpoint,
		AirdropTwitterEndpoint:    airdroptwitterEndpoint,
		AirdropChannelEndpoint:    airdropchannelEndpoint,
	}, nil
}

// GRPC Client Decode

// DecodeGRPCTestResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC test reply to a user-domain test response. Primarily useful in a client.
func DecodeGRPCTestResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.TestResponse)
	return reply, nil
}

// DecodeGRPCGetTwitterAuthUrlResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC gettwitterauthurl reply to a user-domain gettwitterauthurl response. Primarily useful in a client.
func DecodeGRPCGetTwitterAuthUrlResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.GetTwitterAuthUrlResponse)
	return reply, nil
}

// DecodeGRPCGetAirdropInfoResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC getairdropinfo reply to a user-domain getairdropinfo response. Primarily useful in a client.
func DecodeGRPCGetAirdropInfoResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.GetAirdropInfoResponse)
	return reply, nil
}

// DecodeGRPCTwitterCallbackResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC twittercallback reply to a user-domain twittercallback response. Primarily useful in a client.
func DecodeGRPCTwitterCallbackResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.TwitterCallbackResponse)
	return reply, nil
}

// DecodeGRPCTwitterFollowResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC twitterfollow reply to a user-domain twitterfollow response. Primarily useful in a client.
func DecodeGRPCTwitterFollowResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.TwitterFollowResponse)
	return reply, nil
}

// DecodeGRPCLookupTwitterResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC lookuptwitter reply to a user-domain lookuptwitter response. Primarily useful in a client.
func DecodeGRPCLookupTwitterResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.LookupTwitterResponse)
	return reply, nil
}

// DecodeGRPCSendTweetResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC sendtweet reply to a user-domain sendtweet response. Primarily useful in a client.
func DecodeGRPCSendTweetResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.SendTweetResponse)
	return reply, nil
}

// DecodeGRPCCheckTwitterUserResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC checktwitteruser reply to a user-domain checktwitteruser response. Primarily useful in a client.
func DecodeGRPCCheckTwitterUserResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.CheckTwitterUserResponse)
	return reply, nil
}

// DecodeGRPCChannelInfoResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC channelinfo reply to a user-domain channelinfo response. Primarily useful in a client.
func DecodeGRPCChannelInfoResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.ChannelInfoResponse)
	return reply, nil
}

// DecodeGRPCPageChannelUserResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC pagechanneluser reply to a user-domain pagechanneluser response. Primarily useful in a client.
func DecodeGRPCPageChannelUserResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.PageChannelUserResponse)
	return reply, nil
}

// DecodeGRPCGetChannelUserResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC getchanneluser reply to a user-domain getchanneluser response. Primarily useful in a client.
func DecodeGRPCGetChannelUserResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.GetChannelUserResponse)
	return reply, nil
}

// DecodeGRPCAirdropTwitterResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC airdroptwitter reply to a user-domain airdroptwitter response. Primarily useful in a client.
func DecodeGRPCAirdropTwitterResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.AirdropTwitterResponse)
	return reply, nil
}

// DecodeGRPCAirdropChannelResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC airdropchannel reply to a user-domain airdropchannel response. Primarily useful in a client.
func DecodeGRPCAirdropChannelResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.AirdropChannelResponse)
	return reply, nil
}

// GRPC Client Encode

// EncodeGRPCTestRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain test request to a gRPC test request. Primarily useful in a client.
func EncodeGRPCTestRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.TestRequest)
	return req, nil
}

// EncodeGRPCGetTwitterAuthUrlRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain gettwitterauthurl request to a gRPC gettwitterauthurl request. Primarily useful in a client.
func EncodeGRPCGetTwitterAuthUrlRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.GetTwitterAuthUrlRequest)
	return req, nil
}

// EncodeGRPCGetAirdropInfoRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain getairdropinfo request to a gRPC getairdropinfo request. Primarily useful in a client.
func EncodeGRPCGetAirdropInfoRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.GetAirdropInfoRequest)
	return req, nil
}

// EncodeGRPCTwitterCallbackRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain twittercallback request to a gRPC twittercallback request. Primarily useful in a client.
func EncodeGRPCTwitterCallbackRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.TwitterCallbackRequest)
	return req, nil
}

// EncodeGRPCTwitterFollowRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain twitterfollow request to a gRPC twitterfollow request. Primarily useful in a client.
func EncodeGRPCTwitterFollowRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.TwitterFollowRequest)
	return req, nil
}

// EncodeGRPCLookupTwitterRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain lookuptwitter request to a gRPC lookuptwitter request. Primarily useful in a client.
func EncodeGRPCLookupTwitterRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.LookupTwitterRequest)
	return req, nil
}

// EncodeGRPCSendTweetRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain sendtweet request to a gRPC sendtweet request. Primarily useful in a client.
func EncodeGRPCSendTweetRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.SendTweetRequest)
	return req, nil
}

// EncodeGRPCCheckTwitterUserRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain checktwitteruser request to a gRPC checktwitteruser request. Primarily useful in a client.
func EncodeGRPCCheckTwitterUserRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.CheckTwitterUserRequest)
	return req, nil
}

// EncodeGRPCChannelInfoRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain channelinfo request to a gRPC channelinfo request. Primarily useful in a client.
func EncodeGRPCChannelInfoRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.ChannelInfoRequest)
	return req, nil
}

// EncodeGRPCPageChannelUserRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain pagechanneluser request to a gRPC pagechanneluser request. Primarily useful in a client.
func EncodeGRPCPageChannelUserRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.PageChannelUserRequest)
	return req, nil
}

// EncodeGRPCGetChannelUserRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain getchanneluser request to a gRPC getchanneluser request. Primarily useful in a client.
func EncodeGRPCGetChannelUserRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.GetChannelUserRequest)
	return req, nil
}

// EncodeGRPCAirdropTwitterRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain airdroptwitter request to a gRPC airdroptwitter request. Primarily useful in a client.
func EncodeGRPCAirdropTwitterRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.AirdropTwitterRequest)
	return req, nil
}

// EncodeGRPCAirdropChannelRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain airdropchannel request to a gRPC airdropchannel request. Primarily useful in a client.
func EncodeGRPCAirdropChannelRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.AirdropChannelRequest)
	return req, nil
}

type clientConfig struct {
	headers []string
}

// ClientOption is a function that modifies the client config
type ClientOption func(*clientConfig) error

func CtxValuesToSend(keys ...string) ClientOption {
	return func(o *clientConfig) error {
		o.headers = keys
		return nil
	}
}

func contextValuesToGRPCMetadata(keys []string) grpctransport.ClientRequestFunc {
	return func(ctx context.Context, md *metadata.MD) context.Context {
		var pairs []string
		for _, k := range keys {
			if v, ok := ctx.Value(k).(string); ok {
				pairs = append(pairs, k, v)
			}
		}

		if pairs != nil {
			*md = metadata.Join(*md, metadata.Pairs(pairs...))
		}

		return ctx
	}
}
