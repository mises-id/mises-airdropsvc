// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: 5f7d5bf015
// Version Date: 2021-11-26T09:27:01Z

package svc

// This file provides server-side bindings for the HTTP transport.
// It utilizes the transport/http.Server.

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"strconv"
	"strings"

	"github.com/gogo/protobuf/jsonpb"
	"github.com/gogo/protobuf/proto"

	"context"

	httptransport "github.com/go-kit/kit/transport/http"
	"github.com/gorilla/mux"
	"github.com/pkg/errors"

	// This service
	pb "github.com/mises-id/mises-airdropsvc/proto"
)

const contentType = "application/json; charset=utf-8"

var (
	_ = fmt.Sprint
	_ = bytes.Compare
	_ = strconv.Atoi
	_ = httptransport.NewServer
	_ = ioutil.NopCloser
	_ = pb.NewAirdropsvcClient
	_ = io.Copy
	_ = errors.Wrap
)

// MakeHTTPHandler returns a handler that makes a set of endpoints available
// on predefined paths.
func MakeHTTPHandler(endpoints Endpoints, responseEncoder httptransport.EncodeResponseFunc, options ...httptransport.ServerOption) http.Handler {
	if responseEncoder == nil {
		responseEncoder = EncodeHTTPGenericResponse
	}
	serverOptions := []httptransport.ServerOption{
		httptransport.ServerBefore(headersToContext),
		httptransport.ServerErrorEncoder(errorEncoder),
		httptransport.ServerAfter(httptransport.SetContentType(contentType)),
	}
	serverOptions = append(serverOptions, options...)
	m := mux.NewRouter()

	m.Methods("GET").Path("/test/").Handler(httptransport.NewServer(
		endpoints.TestEndpoint,
		DecodeHTTPTestZeroRequest,
		responseEncoder,
		serverOptions...,
	))
	m.Methods("GET").Path("/test").Handler(httptransport.NewServer(
		endpoints.TestEndpoint,
		DecodeHTTPTestOneRequest,
		responseEncoder,
		serverOptions...,
	))

	m.Methods("GET").Path("/twitter/auth_url/").Handler(httptransport.NewServer(
		endpoints.GetTwitterAuthUrlEndpoint,
		DecodeHTTPGetTwitterAuthUrlZeroRequest,
		responseEncoder,
		serverOptions...,
	))
	m.Methods("GET").Path("/twitter/auth_url").Handler(httptransport.NewServer(
		endpoints.GetTwitterAuthUrlEndpoint,
		DecodeHTTPGetTwitterAuthUrlOneRequest,
		responseEncoder,
		serverOptions...,
	))

	m.Methods("GET").Path("/airdrop/info/").Handler(httptransport.NewServer(
		endpoints.GetAirdropInfoEndpoint,
		DecodeHTTPGetAirdropInfoZeroRequest,
		responseEncoder,
		serverOptions...,
	))
	m.Methods("GET").Path("/airdrop/info").Handler(httptransport.NewServer(
		endpoints.GetAirdropInfoEndpoint,
		DecodeHTTPGetAirdropInfoOneRequest,
		responseEncoder,
		serverOptions...,
	))

	m.Methods("GET").Path("/twitter/callback/").Handler(httptransport.NewServer(
		endpoints.TwitterCallbackEndpoint,
		DecodeHTTPTwitterCallbackZeroRequest,
		responseEncoder,
		serverOptions...,
	))
	m.Methods("GET").Path("/twitter/callback").Handler(httptransport.NewServer(
		endpoints.TwitterCallbackEndpoint,
		DecodeHTTPTwitterCallbackOneRequest,
		responseEncoder,
		serverOptions...,
	))

	m.Methods("GET").Path("/twitter/follow/").Handler(httptransport.NewServer(
		endpoints.TwitterFollowEndpoint,
		DecodeHTTPTwitterFollowZeroRequest,
		responseEncoder,
		serverOptions...,
	))
	m.Methods("GET").Path("/twitter/follow").Handler(httptransport.NewServer(
		endpoints.TwitterFollowEndpoint,
		DecodeHTTPTwitterFollowOneRequest,
		responseEncoder,
		serverOptions...,
	))

	m.Methods("GET").Path("/twitter/lookup/").Handler(httptransport.NewServer(
		endpoints.LookupTwitterEndpoint,
		DecodeHTTPLookupTwitterZeroRequest,
		responseEncoder,
		serverOptions...,
	))
	m.Methods("GET").Path("/twitter/lookup").Handler(httptransport.NewServer(
		endpoints.LookupTwitterEndpoint,
		DecodeHTTPLookupTwitterOneRequest,
		responseEncoder,
		serverOptions...,
	))

	m.Methods("GET").Path("/twitter/send_tweet/").Handler(httptransport.NewServer(
		endpoints.SendTweetEndpoint,
		DecodeHTTPSendTweetZeroRequest,
		responseEncoder,
		serverOptions...,
	))
	m.Methods("GET").Path("/twitter/send_tweet").Handler(httptransport.NewServer(
		endpoints.SendTweetEndpoint,
		DecodeHTTPSendTweetOneRequest,
		responseEncoder,
		serverOptions...,
	))

	m.Methods("GET").Path("/twitter/check_user/").Handler(httptransport.NewServer(
		endpoints.CheckTwitterUserEndpoint,
		DecodeHTTPCheckTwitterUserZeroRequest,
		responseEncoder,
		serverOptions...,
	))
	m.Methods("GET").Path("/twitter/check_user").Handler(httptransport.NewServer(
		endpoints.CheckTwitterUserEndpoint,
		DecodeHTTPCheckTwitterUserOneRequest,
		responseEncoder,
		serverOptions...,
	))

	m.Methods("GET").Path("/channel/info/").Handler(httptransport.NewServer(
		endpoints.ChannelInfoEndpoint,
		DecodeHTTPChannelInfoZeroRequest,
		responseEncoder,
		serverOptions...,
	))
	m.Methods("GET").Path("/channel/info").Handler(httptransport.NewServer(
		endpoints.ChannelInfoEndpoint,
		DecodeHTTPChannelInfoOneRequest,
		responseEncoder,
		serverOptions...,
	))

	m.Methods("GET").Path("/channel_user/page/").Handler(httptransport.NewServer(
		endpoints.PageChannelUserEndpoint,
		DecodeHTTPPageChannelUserZeroRequest,
		responseEncoder,
		serverOptions...,
	))
	m.Methods("GET").Path("/channel_user/page").Handler(httptransport.NewServer(
		endpoints.PageChannelUserEndpoint,
		DecodeHTTPPageChannelUserOneRequest,
		responseEncoder,
		serverOptions...,
	))

	m.Methods("GET").Path("/channel_user/").Handler(httptransport.NewServer(
		endpoints.GetChannelUserEndpoint,
		DecodeHTTPGetChannelUserZeroRequest,
		responseEncoder,
		serverOptions...,
	))
	m.Methods("GET").Path("/channel_user").Handler(httptransport.NewServer(
		endpoints.GetChannelUserEndpoint,
		DecodeHTTPGetChannelUserOneRequest,
		responseEncoder,
		serverOptions...,
	))

	m.Methods("GET").Path("/airdrop/twitter/").Handler(httptransport.NewServer(
		endpoints.AirdropTwitterEndpoint,
		DecodeHTTPAirdropTwitterZeroRequest,
		responseEncoder,
		serverOptions...,
	))
	m.Methods("GET").Path("/airdrop/twitter").Handler(httptransport.NewServer(
		endpoints.AirdropTwitterEndpoint,
		DecodeHTTPAirdropTwitterOneRequest,
		responseEncoder,
		serverOptions...,
	))

	m.Methods("GET").Path("/airdrop/channel/").Handler(httptransport.NewServer(
		endpoints.AirdropChannelEndpoint,
		DecodeHTTPAirdropChannelZeroRequest,
		responseEncoder,
		serverOptions...,
	))
	m.Methods("GET").Path("/airdrop/channel").Handler(httptransport.NewServer(
		endpoints.AirdropChannelEndpoint,
		DecodeHTTPAirdropChannelOneRequest,
		responseEncoder,
		serverOptions...,
	))
	return m
}

// ErrorEncoder writes the error to the ResponseWriter, by default a content
// type of application/json, a body of json with key "error" and the value
// error.Error(), and a status code of 500. If the error implements Headerer,
// the provided headers will be applied to the response. If the error
// implements json.Marshaler, and the marshaling succeeds, the JSON encoded
// form of the error will be used. If the error implements StatusCoder, the
// provided StatusCode will be used instead of 500.
func errorEncoder(_ context.Context, err error, w http.ResponseWriter) {
	body, _ := json.Marshal(errorWrapper{Error: err.Error()})
	if marshaler, ok := err.(json.Marshaler); ok {
		if jsonBody, marshalErr := marshaler.MarshalJSON(); marshalErr == nil {
			body = jsonBody
		}
	}
	w.Header().Set("Content-Type", contentType)
	if headerer, ok := err.(httptransport.Headerer); ok {
		for k := range headerer.Headers() {
			w.Header().Set(k, headerer.Headers().Get(k))
		}
	}
	code := http.StatusInternalServerError
	if sc, ok := err.(httptransport.StatusCoder); ok {
		code = sc.StatusCode()
	}
	w.WriteHeader(code)
	w.Write(body)
}

type errorWrapper struct {
	Error string `json:"error"`
}

// httpError satisfies the Headerer and StatusCoder interfaces in
// package github.com/go-kit/kit/transport/http.
type httpError struct {
	error
	statusCode int
	headers    map[string][]string
}

func (h httpError) StatusCode() int {
	return h.statusCode
}

func (h httpError) Headers() http.Header {
	return h.headers
}

// Server Decode

// DecodeHTTPTestZeroRequest is a transport/http.DecodeRequestFunc that
// decodes a JSON-encoded test request from the HTTP request
// body. Primarily useful in a server.
func DecodeHTTPTestZeroRequest(_ context.Context, r *http.Request) (interface{}, error) {
	defer r.Body.Close()
	var req pb.TestRequest
	buf, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return nil, errors.Wrapf(err, "cannot read body of http request")
	}
	if len(buf) > 0 {
		// AllowUnknownFields stops the unmarshaler from failing if the JSON contains unknown fields.
		unmarshaller := jsonpb.Unmarshaler{
			AllowUnknownFields: true,
		}
		if err = unmarshaller.Unmarshal(bytes.NewBuffer(buf), &req); err != nil {
			const size = 8196
			if len(buf) > size {
				buf = buf[:size]
			}
			return nil, httpError{errors.Wrapf(err, "request body '%s': cannot parse non-json request body", buf),
				http.StatusBadRequest,
				nil,
			}
		}
	}

	pathParams := encodePathParams(mux.Vars(r))
	_ = pathParams

	queryParams := r.URL.Query()
	_ = queryParams

	return &req, err
}

// DecodeHTTPTestOneRequest is a transport/http.DecodeRequestFunc that
// decodes a JSON-encoded test request from the HTTP request
// body. Primarily useful in a server.
func DecodeHTTPTestOneRequest(_ context.Context, r *http.Request) (interface{}, error) {
	defer r.Body.Close()
	var req pb.TestRequest
	buf, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return nil, errors.Wrapf(err, "cannot read body of http request")
	}
	if len(buf) > 0 {
		// AllowUnknownFields stops the unmarshaler from failing if the JSON contains unknown fields.
		unmarshaller := jsonpb.Unmarshaler{
			AllowUnknownFields: true,
		}
		if err = unmarshaller.Unmarshal(bytes.NewBuffer(buf), &req); err != nil {
			const size = 8196
			if len(buf) > size {
				buf = buf[:size]
			}
			return nil, httpError{errors.Wrapf(err, "request body '%s': cannot parse non-json request body", buf),
				http.StatusBadRequest,
				nil,
			}
		}
	}

	pathParams := encodePathParams(mux.Vars(r))
	_ = pathParams

	queryParams := r.URL.Query()
	_ = queryParams

	return &req, err
}

// DecodeHTTPGetTwitterAuthUrlZeroRequest is a transport/http.DecodeRequestFunc that
// decodes a JSON-encoded gettwitterauthurl request from the HTTP request
// body. Primarily useful in a server.
func DecodeHTTPGetTwitterAuthUrlZeroRequest(_ context.Context, r *http.Request) (interface{}, error) {
	defer r.Body.Close()
	var req pb.GetTwitterAuthUrlRequest
	buf, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return nil, errors.Wrapf(err, "cannot read body of http request")
	}
	if len(buf) > 0 {
		// AllowUnknownFields stops the unmarshaler from failing if the JSON contains unknown fields.
		unmarshaller := jsonpb.Unmarshaler{
			AllowUnknownFields: true,
		}
		if err = unmarshaller.Unmarshal(bytes.NewBuffer(buf), &req); err != nil {
			const size = 8196
			if len(buf) > size {
				buf = buf[:size]
			}
			return nil, httpError{errors.Wrapf(err, "request body '%s': cannot parse non-json request body", buf),
				http.StatusBadRequest,
				nil,
			}
		}
	}

	pathParams := encodePathParams(mux.Vars(r))
	_ = pathParams

	queryParams := r.URL.Query()
	_ = queryParams

	if CurrentUidGetTwitterAuthUrlStrArr, ok := queryParams["current_uid"]; ok {
		CurrentUidGetTwitterAuthUrlStr := CurrentUidGetTwitterAuthUrlStrArr[0]
		CurrentUidGetTwitterAuthUrl, err := strconv.ParseUint(CurrentUidGetTwitterAuthUrlStr, 10, 64)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("Error while extracting CurrentUidGetTwitterAuthUrl from query, queryParams: %v", queryParams))
		}
		req.CurrentUid = CurrentUidGetTwitterAuthUrl
	}

	if UserAgentGetTwitterAuthUrlStrArr, ok := queryParams["user_agent"]; ok {
		UserAgentGetTwitterAuthUrlStr := UserAgentGetTwitterAuthUrlStrArr[0]

		err = json.Unmarshal([]byte(UserAgentGetTwitterAuthUrlStr), req.UserAgent)
		if err != nil {
			return nil, errors.Wrapf(err, "couldn't decode UserAgentGetTwitterAuthUrl from %v", UserAgentGetTwitterAuthUrlStr)
		}

	}

	return &req, err
}

// DecodeHTTPGetTwitterAuthUrlOneRequest is a transport/http.DecodeRequestFunc that
// decodes a JSON-encoded gettwitterauthurl request from the HTTP request
// body. Primarily useful in a server.
func DecodeHTTPGetTwitterAuthUrlOneRequest(_ context.Context, r *http.Request) (interface{}, error) {
	defer r.Body.Close()
	var req pb.GetTwitterAuthUrlRequest
	buf, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return nil, errors.Wrapf(err, "cannot read body of http request")
	}
	if len(buf) > 0 {
		// AllowUnknownFields stops the unmarshaler from failing if the JSON contains unknown fields.
		unmarshaller := jsonpb.Unmarshaler{
			AllowUnknownFields: true,
		}
		if err = unmarshaller.Unmarshal(bytes.NewBuffer(buf), &req); err != nil {
			const size = 8196
			if len(buf) > size {
				buf = buf[:size]
			}
			return nil, httpError{errors.Wrapf(err, "request body '%s': cannot parse non-json request body", buf),
				http.StatusBadRequest,
				nil,
			}
		}
	}

	pathParams := encodePathParams(mux.Vars(r))
	_ = pathParams

	queryParams := r.URL.Query()
	_ = queryParams

	if CurrentUidGetTwitterAuthUrlStrArr, ok := queryParams["current_uid"]; ok {
		CurrentUidGetTwitterAuthUrlStr := CurrentUidGetTwitterAuthUrlStrArr[0]
		CurrentUidGetTwitterAuthUrl, err := strconv.ParseUint(CurrentUidGetTwitterAuthUrlStr, 10, 64)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("Error while extracting CurrentUidGetTwitterAuthUrl from query, queryParams: %v", queryParams))
		}
		req.CurrentUid = CurrentUidGetTwitterAuthUrl
	}

	if UserAgentGetTwitterAuthUrlStrArr, ok := queryParams["user_agent"]; ok {
		UserAgentGetTwitterAuthUrlStr := UserAgentGetTwitterAuthUrlStrArr[0]

		err = json.Unmarshal([]byte(UserAgentGetTwitterAuthUrlStr), req.UserAgent)
		if err != nil {
			return nil, errors.Wrapf(err, "couldn't decode UserAgentGetTwitterAuthUrl from %v", UserAgentGetTwitterAuthUrlStr)
		}

	}

	return &req, err
}

// DecodeHTTPGetAirdropInfoZeroRequest is a transport/http.DecodeRequestFunc that
// decodes a JSON-encoded getairdropinfo request from the HTTP request
// body. Primarily useful in a server.
func DecodeHTTPGetAirdropInfoZeroRequest(_ context.Context, r *http.Request) (interface{}, error) {
	defer r.Body.Close()
	var req pb.GetAirdropInfoRequest
	buf, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return nil, errors.Wrapf(err, "cannot read body of http request")
	}
	if len(buf) > 0 {
		// AllowUnknownFields stops the unmarshaler from failing if the JSON contains unknown fields.
		unmarshaller := jsonpb.Unmarshaler{
			AllowUnknownFields: true,
		}
		if err = unmarshaller.Unmarshal(bytes.NewBuffer(buf), &req); err != nil {
			const size = 8196
			if len(buf) > size {
				buf = buf[:size]
			}
			return nil, httpError{errors.Wrapf(err, "request body '%s': cannot parse non-json request body", buf),
				http.StatusBadRequest,
				nil,
			}
		}
	}

	pathParams := encodePathParams(mux.Vars(r))
	_ = pathParams

	queryParams := r.URL.Query()
	_ = queryParams

	if CurrentUidGetAirdropInfoStrArr, ok := queryParams["current_uid"]; ok {
		CurrentUidGetAirdropInfoStr := CurrentUidGetAirdropInfoStrArr[0]
		CurrentUidGetAirdropInfo, err := strconv.ParseUint(CurrentUidGetAirdropInfoStr, 10, 64)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("Error while extracting CurrentUidGetAirdropInfo from query, queryParams: %v", queryParams))
		}
		req.CurrentUid = CurrentUidGetAirdropInfo
	}

	return &req, err
}

// DecodeHTTPGetAirdropInfoOneRequest is a transport/http.DecodeRequestFunc that
// decodes a JSON-encoded getairdropinfo request from the HTTP request
// body. Primarily useful in a server.
func DecodeHTTPGetAirdropInfoOneRequest(_ context.Context, r *http.Request) (interface{}, error) {
	defer r.Body.Close()
	var req pb.GetAirdropInfoRequest
	buf, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return nil, errors.Wrapf(err, "cannot read body of http request")
	}
	if len(buf) > 0 {
		// AllowUnknownFields stops the unmarshaler from failing if the JSON contains unknown fields.
		unmarshaller := jsonpb.Unmarshaler{
			AllowUnknownFields: true,
		}
		if err = unmarshaller.Unmarshal(bytes.NewBuffer(buf), &req); err != nil {
			const size = 8196
			if len(buf) > size {
				buf = buf[:size]
			}
			return nil, httpError{errors.Wrapf(err, "request body '%s': cannot parse non-json request body", buf),
				http.StatusBadRequest,
				nil,
			}
		}
	}

	pathParams := encodePathParams(mux.Vars(r))
	_ = pathParams

	queryParams := r.URL.Query()
	_ = queryParams

	if CurrentUidGetAirdropInfoStrArr, ok := queryParams["current_uid"]; ok {
		CurrentUidGetAirdropInfoStr := CurrentUidGetAirdropInfoStrArr[0]
		CurrentUidGetAirdropInfo, err := strconv.ParseUint(CurrentUidGetAirdropInfoStr, 10, 64)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("Error while extracting CurrentUidGetAirdropInfo from query, queryParams: %v", queryParams))
		}
		req.CurrentUid = CurrentUidGetAirdropInfo
	}

	return &req, err
}

// DecodeHTTPTwitterCallbackZeroRequest is a transport/http.DecodeRequestFunc that
// decodes a JSON-encoded twittercallback request from the HTTP request
// body. Primarily useful in a server.
func DecodeHTTPTwitterCallbackZeroRequest(_ context.Context, r *http.Request) (interface{}, error) {
	defer r.Body.Close()
	var req pb.TwitterCallbackRequest
	buf, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return nil, errors.Wrapf(err, "cannot read body of http request")
	}
	if len(buf) > 0 {
		// AllowUnknownFields stops the unmarshaler from failing if the JSON contains unknown fields.
		unmarshaller := jsonpb.Unmarshaler{
			AllowUnknownFields: true,
		}
		if err = unmarshaller.Unmarshal(bytes.NewBuffer(buf), &req); err != nil {
			const size = 8196
			if len(buf) > size {
				buf = buf[:size]
			}
			return nil, httpError{errors.Wrapf(err, "request body '%s': cannot parse non-json request body", buf),
				http.StatusBadRequest,
				nil,
			}
		}
	}

	pathParams := encodePathParams(mux.Vars(r))
	_ = pathParams

	queryParams := r.URL.Query()
	_ = queryParams

	if CurrentUidTwitterCallbackStrArr, ok := queryParams["current_uid"]; ok {
		CurrentUidTwitterCallbackStr := CurrentUidTwitterCallbackStrArr[0]
		CurrentUidTwitterCallback, err := strconv.ParseUint(CurrentUidTwitterCallbackStr, 10, 64)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("Error while extracting CurrentUidTwitterCallback from query, queryParams: %v", queryParams))
		}
		req.CurrentUid = CurrentUidTwitterCallback
	}

	if OauthTokenTwitterCallbackStrArr, ok := queryParams["oauth_token"]; ok {
		OauthTokenTwitterCallbackStr := OauthTokenTwitterCallbackStrArr[0]
		OauthTokenTwitterCallback := OauthTokenTwitterCallbackStr
		req.OauthToken = OauthTokenTwitterCallback
	}

	if OauthVerifierTwitterCallbackStrArr, ok := queryParams["oauth_verifier"]; ok {
		OauthVerifierTwitterCallbackStr := OauthVerifierTwitterCallbackStrArr[0]
		OauthVerifierTwitterCallback := OauthVerifierTwitterCallbackStr
		req.OauthVerifier = OauthVerifierTwitterCallback
	}

	if UserAgentTwitterCallbackStrArr, ok := queryParams["user_agent"]; ok {
		UserAgentTwitterCallbackStr := UserAgentTwitterCallbackStrArr[0]

		err = json.Unmarshal([]byte(UserAgentTwitterCallbackStr), req.UserAgent)
		if err != nil {
			return nil, errors.Wrapf(err, "couldn't decode UserAgentTwitterCallback from %v", UserAgentTwitterCallbackStr)
		}

	}

	if StateTwitterCallbackStrArr, ok := queryParams["state"]; ok {
		StateTwitterCallbackStr := StateTwitterCallbackStrArr[0]
		StateTwitterCallback := StateTwitterCallbackStr
		req.State = StateTwitterCallback
	}

	return &req, err
}

// DecodeHTTPTwitterCallbackOneRequest is a transport/http.DecodeRequestFunc that
// decodes a JSON-encoded twittercallback request from the HTTP request
// body. Primarily useful in a server.
func DecodeHTTPTwitterCallbackOneRequest(_ context.Context, r *http.Request) (interface{}, error) {
	defer r.Body.Close()
	var req pb.TwitterCallbackRequest
	buf, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return nil, errors.Wrapf(err, "cannot read body of http request")
	}
	if len(buf) > 0 {
		// AllowUnknownFields stops the unmarshaler from failing if the JSON contains unknown fields.
		unmarshaller := jsonpb.Unmarshaler{
			AllowUnknownFields: true,
		}
		if err = unmarshaller.Unmarshal(bytes.NewBuffer(buf), &req); err != nil {
			const size = 8196
			if len(buf) > size {
				buf = buf[:size]
			}
			return nil, httpError{errors.Wrapf(err, "request body '%s': cannot parse non-json request body", buf),
				http.StatusBadRequest,
				nil,
			}
		}
	}

	pathParams := encodePathParams(mux.Vars(r))
	_ = pathParams

	queryParams := r.URL.Query()
	_ = queryParams

	if CurrentUidTwitterCallbackStrArr, ok := queryParams["current_uid"]; ok {
		CurrentUidTwitterCallbackStr := CurrentUidTwitterCallbackStrArr[0]
		CurrentUidTwitterCallback, err := strconv.ParseUint(CurrentUidTwitterCallbackStr, 10, 64)
		if err != nil {
			return nil, errors.Wrap(err, fmt.Sprintf("Error while extracting CurrentUidTwitterCallback from query, queryParams: %v", queryParams))
		}
		req.CurrentUid = CurrentUidTwitterCallback
	}

	if OauthTokenTwitterCallbackStrArr, ok := queryParams["oauth_token"]; ok {
		OauthTokenTwitterCallbackStr := OauthTokenTwitterCallbackStrArr[0]
		OauthTokenTwitterCallback := OauthTokenTwitterCallbackStr
		req.OauthToken = OauthTokenTwitterCallback
	}

	if OauthVerifierTwitterCallbackStrArr, ok := queryParams["oauth_verifier"]; ok {
		OauthVerifierTwitterCallbackStr := OauthVerifierTwitterCallbackStrArr[0]
		OauthVerifierTwitterCallback := OauthVerifierTwitterCallbackStr
		req.OauthVerifier = OauthVerifierTwitterCallback
	}

	if UserAgentTwitterCallbackStrArr, ok := queryParams["user_agent"]; ok {
		UserAgentTwitterCallbackStr := UserAgentTwitterCallbackStrArr[0]

		err = json.Unmarshal([]byte(UserAgentTwitterCallbackStr), req.UserAgent)
		if err != nil {
			return nil, errors.Wrapf(err, "couldn't decode UserAgentTwitterCallback from %v", UserAgentTwitterCallbackStr)
		}

	}

	if StateTwitterCallbackStrArr, ok := queryParams["state"]; ok {
		StateTwitterCallbackStr := StateTwitterCallbackStrArr[0]
		StateTwitterCallback := StateTwitterCallbackStr
		req.State = StateTwitterCallback
	}

	return &req, err
}

// DecodeHTTPTwitterFollowZeroRequest is a transport/http.DecodeRequestFunc that
// decodes a JSON-encoded twitterfollow request from the HTTP request
// body. Primarily useful in a server.
func DecodeHTTPTwitterFollowZeroRequest(_ context.Context, r *http.Request) (interface{}, error) {
	defer r.Body.Close()
	var req pb.TwitterFollowRequest
	buf, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return nil, errors.Wrapf(err, "cannot read body of http request")
	}
	if len(buf) > 0 {
		// AllowUnknownFields stops the unmarshaler from failing if the JSON contains unknown fields.
		unmarshaller := jsonpb.Unmarshaler{
			AllowUnknownFields: true,
		}
		if err = unmarshaller.Unmarshal(bytes.NewBuffer(buf), &req); err != nil {
			const size = 8196
			if len(buf) > size {
				buf = buf[:size]
			}
			return nil, httpError{errors.Wrapf(err, "request body '%s': cannot parse non-json request body", buf),
				http.StatusBadRequest,
				nil,
			}
		}
	}

	pathParams := encodePathParams(mux.Vars(r))
	_ = pathParams

	queryParams := r.URL.Query()
	_ = queryParams

	return &req, err
}

// DecodeHTTPTwitterFollowOneRequest is a transport/http.DecodeRequestFunc that
// decodes a JSON-encoded twitterfollow request from the HTTP request
// body. Primarily useful in a server.
func DecodeHTTPTwitterFollowOneRequest(_ context.Context, r *http.Request) (interface{}, error) {
	defer r.Body.Close()
	var req pb.TwitterFollowRequest
	buf, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return nil, errors.Wrapf(err, "cannot read body of http request")
	}
	if len(buf) > 0 {
		// AllowUnknownFields stops the unmarshaler from failing if the JSON contains unknown fields.
		unmarshaller := jsonpb.Unmarshaler{
			AllowUnknownFields: true,
		}
		if err = unmarshaller.Unmarshal(bytes.NewBuffer(buf), &req); err != nil {
			const size = 8196
			if len(buf) > size {
				buf = buf[:size]
			}
			return nil, httpError{errors.Wrapf(err, "request body '%s': cannot parse non-json request body", buf),
				http.StatusBadRequest,
				nil,
			}
		}
	}

	pathParams := encodePathParams(mux.Vars(r))
	_ = pathParams

	queryParams := r.URL.Query()
	_ = queryParams

	return &req, err
}

// DecodeHTTPLookupTwitterZeroRequest is a transport/http.DecodeRequestFunc that
// decodes a JSON-encoded lookuptwitter request from the HTTP request
// body. Primarily useful in a server.
func DecodeHTTPLookupTwitterZeroRequest(_ context.Context, r *http.Request) (interface{}, error) {
	defer r.Body.Close()
	var req pb.LookupTwitterRequest
	buf, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return nil, errors.Wrapf(err, "cannot read body of http request")
	}
	if len(buf) > 0 {
		// AllowUnknownFields stops the unmarshaler from failing if the JSON contains unknown fields.
		unmarshaller := jsonpb.Unmarshaler{
			AllowUnknownFields: true,
		}
		if err = unmarshaller.Unmarshal(bytes.NewBuffer(buf), &req); err != nil {
			const size = 8196
			if len(buf) > size {
				buf = buf[:size]
			}
			return nil, httpError{errors.Wrapf(err, "request body '%s': cannot parse non-json request body", buf),
				http.StatusBadRequest,
				nil,
			}
		}
	}

	pathParams := encodePathParams(mux.Vars(r))
	_ = pathParams

	queryParams := r.URL.Query()
	_ = queryParams

	return &req, err
}

// DecodeHTTPLookupTwitterOneRequest is a transport/http.DecodeRequestFunc that
// decodes a JSON-encoded lookuptwitter request from the HTTP request
// body. Primarily useful in a server.
func DecodeHTTPLookupTwitterOneRequest(_ context.Context, r *http.Request) (interface{}, error) {
	defer r.Body.Close()
	var req pb.LookupTwitterRequest
	buf, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return nil, errors.Wrapf(err, "cannot read body of http request")
	}
	if len(buf) > 0 {
		// AllowUnknownFields stops the unmarshaler from failing if the JSON contains unknown fields.
		unmarshaller := jsonpb.Unmarshaler{
			AllowUnknownFields: true,
		}
		if err = unmarshaller.Unmarshal(bytes.NewBuffer(buf), &req); err != nil {
			const size = 8196
			if len(buf) > size {
				buf = buf[:size]
			}
			return nil, httpError{errors.Wrapf(err, "request body '%s': cannot parse non-json request body", buf),
				http.StatusBadRequest,
				nil,
			}
		}
	}

	pathParams := encodePathParams(mux.Vars(r))
	_ = pathParams

	queryParams := r.URL.Query()
	_ = queryParams

	return &req, err
}

// DecodeHTTPSendTweetZeroRequest is a transport/http.DecodeRequestFunc that
// decodes a JSON-encoded sendtweet request from the HTTP request
// body. Primarily useful in a server.
func DecodeHTTPSendTweetZeroRequest(_ context.Context, r *http.Request) (interface{}, error) {
	defer r.Body.Close()
	var req pb.SendTweetRequest
	buf, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return nil, errors.Wrapf(err, "cannot read body of http request")
	}
	if len(buf) > 0 {
		// AllowUnknownFields stops the unmarshaler from failing if the JSON contains unknown fields.
		unmarshaller := jsonpb.Unmarshaler{
			AllowUnknownFields: true,
		}
		if err = unmarshaller.Unmarshal(bytes.NewBuffer(buf), &req); err != nil {
			const size = 8196
			if len(buf) > size {
				buf = buf[:size]
			}
			return nil, httpError{errors.Wrapf(err, "request body '%s': cannot parse non-json request body", buf),
				http.StatusBadRequest,
				nil,
			}
		}
	}

	pathParams := encodePathParams(mux.Vars(r))
	_ = pathParams

	queryParams := r.URL.Query()
	_ = queryParams

	return &req, err
}

// DecodeHTTPSendTweetOneRequest is a transport/http.DecodeRequestFunc that
// decodes a JSON-encoded sendtweet request from the HTTP request
// body. Primarily useful in a server.
func DecodeHTTPSendTweetOneRequest(_ context.Context, r *http.Request) (interface{}, error) {
	defer r.Body.Close()
	var req pb.SendTweetRequest
	buf, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return nil, errors.Wrapf(err, "cannot read body of http request")
	}
	if len(buf) > 0 {
		// AllowUnknownFields stops the unmarshaler from failing if the JSON contains unknown fields.
		unmarshaller := jsonpb.Unmarshaler{
			AllowUnknownFields: true,
		}
		if err = unmarshaller.Unmarshal(bytes.NewBuffer(buf), &req); err != nil {
			const size = 8196
			if len(buf) > size {
				buf = buf[:size]
			}
			return nil, httpError{errors.Wrapf(err, "request body '%s': cannot parse non-json request body", buf),
				http.StatusBadRequest,
				nil,
			}
		}
	}

	pathParams := encodePathParams(mux.Vars(r))
	_ = pathParams

	queryParams := r.URL.Query()
	_ = queryParams

	return &req, err
}

// DecodeHTTPCheckTwitterUserZeroRequest is a transport/http.DecodeRequestFunc that
// decodes a JSON-encoded checktwitteruser request from the HTTP request
// body. Primarily useful in a server.
func DecodeHTTPCheckTwitterUserZeroRequest(_ context.Context, r *http.Request) (interface{}, error) {
	defer r.Body.Close()
	var req pb.CheckTwitterUserRequest
	buf, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return nil, errors.Wrapf(err, "cannot read body of http request")
	}
	if len(buf) > 0 {
		// AllowUnknownFields stops the unmarshaler from failing if the JSON contains unknown fields.
		unmarshaller := jsonpb.Unmarshaler{
			AllowUnknownFields: true,
		}
		if err = unmarshaller.Unmarshal(bytes.NewBuffer(buf), &req); err != nil {
			const size = 8196
			if len(buf) > size {
				buf = buf[:size]
			}
			return nil, httpError{errors.Wrapf(err, "request body '%s': cannot parse non-json request body", buf),
				http.StatusBadRequest,
				nil,
			}
		}
	}

	pathParams := encodePathParams(mux.Vars(r))
	_ = pathParams

	queryParams := r.URL.Query()
	_ = queryParams

	return &req, err
}

// DecodeHTTPCheckTwitterUserOneRequest is a transport/http.DecodeRequestFunc that
// decodes a JSON-encoded checktwitteruser request from the HTTP request
// body. Primarily useful in a server.
func DecodeHTTPCheckTwitterUserOneRequest(_ context.Context, r *http.Request) (interface{}, error) {
	defer r.Body.Close()
	var req pb.CheckTwitterUserRequest
	buf, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return nil, errors.Wrapf(err, "cannot read body of http request")
	}
	if len(buf) > 0 {
		// AllowUnknownFields stops the unmarshaler from failing if the JSON contains unknown fields.
		unmarshaller := jsonpb.Unmarshaler{
			AllowUnknownFields: true,
		}
		if err = unmarshaller.Unmarshal(bytes.NewBuffer(buf), &req); err != nil {
			const size = 8196
			if len(buf) > size {
				buf = buf[:size]
			}
			return nil, httpError{errors.Wrapf(err, "request body '%s': cannot parse non-json request body", buf),
				http.StatusBadRequest,
				nil,
			}
		}
	}

	pathParams := encodePathParams(mux.Vars(r))
	_ = pathParams

	queryParams := r.URL.Query()
	_ = queryParams

	return &req, err
}

// DecodeHTTPChannelInfoZeroRequest is a transport/http.DecodeRequestFunc that
// decodes a JSON-encoded channelinfo request from the HTTP request
// body. Primarily useful in a server.
func DecodeHTTPChannelInfoZeroRequest(_ context.Context, r *http.Request) (interface{}, error) {
	defer r.Body.Close()
	var req pb.ChannelInfoRequest
	buf, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return nil, errors.Wrapf(err, "cannot read body of http request")
	}
	if len(buf) > 0 {
		// AllowUnknownFields stops the unmarshaler from failing if the JSON contains unknown fields.
		unmarshaller := jsonpb.Unmarshaler{
			AllowUnknownFields: true,
		}
		if err = unmarshaller.Unmarshal(bytes.NewBuffer(buf), &req); err != nil {
			const size = 8196
			if len(buf) > size {
				buf = buf[:size]
			}
			return nil, httpError{errors.Wrapf(err, "request body '%s': cannot parse non-json request body", buf),
				http.StatusBadRequest,
				nil,
			}
		}
	}

	pathParams := encodePathParams(mux.Vars(r))
	_ = pathParams

	queryParams := r.URL.Query()
	_ = queryParams

	if MisesidChannelInfoStrArr, ok := queryParams["misesid"]; ok {
		MisesidChannelInfoStr := MisesidChannelInfoStrArr[0]
		MisesidChannelInfo := MisesidChannelInfoStr
		req.Misesid = MisesidChannelInfo
	}

	if TypeChannelInfoStrArr, ok := queryParams["type"]; ok {
		TypeChannelInfoStr := TypeChannelInfoStrArr[0]
		TypeChannelInfo := TypeChannelInfoStr
		req.Type = TypeChannelInfo
	}

	if MediumChannelInfoStrArr, ok := queryParams["medium"]; ok {
		MediumChannelInfoStr := MediumChannelInfoStrArr[0]
		MediumChannelInfo := MediumChannelInfoStr
		req.Medium = MediumChannelInfo
	}

	return &req, err
}

// DecodeHTTPChannelInfoOneRequest is a transport/http.DecodeRequestFunc that
// decodes a JSON-encoded channelinfo request from the HTTP request
// body. Primarily useful in a server.
func DecodeHTTPChannelInfoOneRequest(_ context.Context, r *http.Request) (interface{}, error) {
	defer r.Body.Close()
	var req pb.ChannelInfoRequest
	buf, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return nil, errors.Wrapf(err, "cannot read body of http request")
	}
	if len(buf) > 0 {
		// AllowUnknownFields stops the unmarshaler from failing if the JSON contains unknown fields.
		unmarshaller := jsonpb.Unmarshaler{
			AllowUnknownFields: true,
		}
		if err = unmarshaller.Unmarshal(bytes.NewBuffer(buf), &req); err != nil {
			const size = 8196
			if len(buf) > size {
				buf = buf[:size]
			}
			return nil, httpError{errors.Wrapf(err, "request body '%s': cannot parse non-json request body", buf),
				http.StatusBadRequest,
				nil,
			}
		}
	}

	pathParams := encodePathParams(mux.Vars(r))
	_ = pathParams

	queryParams := r.URL.Query()
	_ = queryParams

	if MisesidChannelInfoStrArr, ok := queryParams["misesid"]; ok {
		MisesidChannelInfoStr := MisesidChannelInfoStrArr[0]
		MisesidChannelInfo := MisesidChannelInfoStr
		req.Misesid = MisesidChannelInfo
	}

	if TypeChannelInfoStrArr, ok := queryParams["type"]; ok {
		TypeChannelInfoStr := TypeChannelInfoStrArr[0]
		TypeChannelInfo := TypeChannelInfoStr
		req.Type = TypeChannelInfo
	}

	if MediumChannelInfoStrArr, ok := queryParams["medium"]; ok {
		MediumChannelInfoStr := MediumChannelInfoStrArr[0]
		MediumChannelInfo := MediumChannelInfoStr
		req.Medium = MediumChannelInfo
	}

	return &req, err
}

// DecodeHTTPPageChannelUserZeroRequest is a transport/http.DecodeRequestFunc that
// decodes a JSON-encoded pagechanneluser request from the HTTP request
// body. Primarily useful in a server.
func DecodeHTTPPageChannelUserZeroRequest(_ context.Context, r *http.Request) (interface{}, error) {
	defer r.Body.Close()
	var req pb.PageChannelUserRequest
	buf, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return nil, errors.Wrapf(err, "cannot read body of http request")
	}
	if len(buf) > 0 {
		// AllowUnknownFields stops the unmarshaler from failing if the JSON contains unknown fields.
		unmarshaller := jsonpb.Unmarshaler{
			AllowUnknownFields: true,
		}
		if err = unmarshaller.Unmarshal(bytes.NewBuffer(buf), &req); err != nil {
			const size = 8196
			if len(buf) > size {
				buf = buf[:size]
			}
			return nil, httpError{errors.Wrapf(err, "request body '%s': cannot parse non-json request body", buf),
				http.StatusBadRequest,
				nil,
			}
		}
	}

	pathParams := encodePathParams(mux.Vars(r))
	_ = pathParams

	queryParams := r.URL.Query()
	_ = queryParams

	if MisesidPageChannelUserStrArr, ok := queryParams["misesid"]; ok {
		MisesidPageChannelUserStr := MisesidPageChannelUserStrArr[0]
		MisesidPageChannelUser := MisesidPageChannelUserStr
		req.Misesid = MisesidPageChannelUser
	}

	if PaginatorPageChannelUserStrArr, ok := queryParams["paginator"]; ok {
		PaginatorPageChannelUserStr := PaginatorPageChannelUserStrArr[0]

		err = json.Unmarshal([]byte(PaginatorPageChannelUserStr), req.Paginator)
		if err != nil {
			return nil, errors.Wrapf(err, "couldn't decode PaginatorPageChannelUser from %v", PaginatorPageChannelUserStr)
		}

	}

	return &req, err
}

// DecodeHTTPPageChannelUserOneRequest is a transport/http.DecodeRequestFunc that
// decodes a JSON-encoded pagechanneluser request from the HTTP request
// body. Primarily useful in a server.
func DecodeHTTPPageChannelUserOneRequest(_ context.Context, r *http.Request) (interface{}, error) {
	defer r.Body.Close()
	var req pb.PageChannelUserRequest
	buf, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return nil, errors.Wrapf(err, "cannot read body of http request")
	}
	if len(buf) > 0 {
		// AllowUnknownFields stops the unmarshaler from failing if the JSON contains unknown fields.
		unmarshaller := jsonpb.Unmarshaler{
			AllowUnknownFields: true,
		}
		if err = unmarshaller.Unmarshal(bytes.NewBuffer(buf), &req); err != nil {
			const size = 8196
			if len(buf) > size {
				buf = buf[:size]
			}
			return nil, httpError{errors.Wrapf(err, "request body '%s': cannot parse non-json request body", buf),
				http.StatusBadRequest,
				nil,
			}
		}
	}

	pathParams := encodePathParams(mux.Vars(r))
	_ = pathParams

	queryParams := r.URL.Query()
	_ = queryParams

	if MisesidPageChannelUserStrArr, ok := queryParams["misesid"]; ok {
		MisesidPageChannelUserStr := MisesidPageChannelUserStrArr[0]
		MisesidPageChannelUser := MisesidPageChannelUserStr
		req.Misesid = MisesidPageChannelUser
	}

	if PaginatorPageChannelUserStrArr, ok := queryParams["paginator"]; ok {
		PaginatorPageChannelUserStr := PaginatorPageChannelUserStrArr[0]

		err = json.Unmarshal([]byte(PaginatorPageChannelUserStr), req.Paginator)
		if err != nil {
			return nil, errors.Wrapf(err, "couldn't decode PaginatorPageChannelUser from %v", PaginatorPageChannelUserStr)
		}

	}

	return &req, err
}

// DecodeHTTPGetChannelUserZeroRequest is a transport/http.DecodeRequestFunc that
// decodes a JSON-encoded getchanneluser request from the HTTP request
// body. Primarily useful in a server.
func DecodeHTTPGetChannelUserZeroRequest(_ context.Context, r *http.Request) (interface{}, error) {
	defer r.Body.Close()
	var req pb.GetChannelUserRequest
	buf, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return nil, errors.Wrapf(err, "cannot read body of http request")
	}
	if len(buf) > 0 {
		// AllowUnknownFields stops the unmarshaler from failing if the JSON contains unknown fields.
		unmarshaller := jsonpb.Unmarshaler{
			AllowUnknownFields: true,
		}
		if err = unmarshaller.Unmarshal(bytes.NewBuffer(buf), &req); err != nil {
			const size = 8196
			if len(buf) > size {
				buf = buf[:size]
			}
			return nil, httpError{errors.Wrapf(err, "request body '%s': cannot parse non-json request body", buf),
				http.StatusBadRequest,
				nil,
			}
		}
	}

	pathParams := encodePathParams(mux.Vars(r))
	_ = pathParams

	queryParams := r.URL.Query()
	_ = queryParams

	if MisesidGetChannelUserStrArr, ok := queryParams["misesid"]; ok {
		MisesidGetChannelUserStr := MisesidGetChannelUserStrArr[0]
		MisesidGetChannelUser := MisesidGetChannelUserStr
		req.Misesid = MisesidGetChannelUser
	}

	return &req, err
}

// DecodeHTTPGetChannelUserOneRequest is a transport/http.DecodeRequestFunc that
// decodes a JSON-encoded getchanneluser request from the HTTP request
// body. Primarily useful in a server.
func DecodeHTTPGetChannelUserOneRequest(_ context.Context, r *http.Request) (interface{}, error) {
	defer r.Body.Close()
	var req pb.GetChannelUserRequest
	buf, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return nil, errors.Wrapf(err, "cannot read body of http request")
	}
	if len(buf) > 0 {
		// AllowUnknownFields stops the unmarshaler from failing if the JSON contains unknown fields.
		unmarshaller := jsonpb.Unmarshaler{
			AllowUnknownFields: true,
		}
		if err = unmarshaller.Unmarshal(bytes.NewBuffer(buf), &req); err != nil {
			const size = 8196
			if len(buf) > size {
				buf = buf[:size]
			}
			return nil, httpError{errors.Wrapf(err, "request body '%s': cannot parse non-json request body", buf),
				http.StatusBadRequest,
				nil,
			}
		}
	}

	pathParams := encodePathParams(mux.Vars(r))
	_ = pathParams

	queryParams := r.URL.Query()
	_ = queryParams

	if MisesidGetChannelUserStrArr, ok := queryParams["misesid"]; ok {
		MisesidGetChannelUserStr := MisesidGetChannelUserStrArr[0]
		MisesidGetChannelUser := MisesidGetChannelUserStr
		req.Misesid = MisesidGetChannelUser
	}

	return &req, err
}

// DecodeHTTPAirdropTwitterZeroRequest is a transport/http.DecodeRequestFunc that
// decodes a JSON-encoded airdroptwitter request from the HTTP request
// body. Primarily useful in a server.
func DecodeHTTPAirdropTwitterZeroRequest(_ context.Context, r *http.Request) (interface{}, error) {
	defer r.Body.Close()
	var req pb.AirdropTwitterRequest
	buf, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return nil, errors.Wrapf(err, "cannot read body of http request")
	}
	if len(buf) > 0 {
		// AllowUnknownFields stops the unmarshaler from failing if the JSON contains unknown fields.
		unmarshaller := jsonpb.Unmarshaler{
			AllowUnknownFields: true,
		}
		if err = unmarshaller.Unmarshal(bytes.NewBuffer(buf), &req); err != nil {
			const size = 8196
			if len(buf) > size {
				buf = buf[:size]
			}
			return nil, httpError{errors.Wrapf(err, "request body '%s': cannot parse non-json request body", buf),
				http.StatusBadRequest,
				nil,
			}
		}
	}

	pathParams := encodePathParams(mux.Vars(r))
	_ = pathParams

	queryParams := r.URL.Query()
	_ = queryParams

	if MisesidAirdropTwitterStrArr, ok := queryParams["misesid"]; ok {
		MisesidAirdropTwitterStr := MisesidAirdropTwitterStrArr[0]
		MisesidAirdropTwitter := MisesidAirdropTwitterStr
		req.Misesid = MisesidAirdropTwitter
	}

	return &req, err
}

// DecodeHTTPAirdropTwitterOneRequest is a transport/http.DecodeRequestFunc that
// decodes a JSON-encoded airdroptwitter request from the HTTP request
// body. Primarily useful in a server.
func DecodeHTTPAirdropTwitterOneRequest(_ context.Context, r *http.Request) (interface{}, error) {
	defer r.Body.Close()
	var req pb.AirdropTwitterRequest
	buf, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return nil, errors.Wrapf(err, "cannot read body of http request")
	}
	if len(buf) > 0 {
		// AllowUnknownFields stops the unmarshaler from failing if the JSON contains unknown fields.
		unmarshaller := jsonpb.Unmarshaler{
			AllowUnknownFields: true,
		}
		if err = unmarshaller.Unmarshal(bytes.NewBuffer(buf), &req); err != nil {
			const size = 8196
			if len(buf) > size {
				buf = buf[:size]
			}
			return nil, httpError{errors.Wrapf(err, "request body '%s': cannot parse non-json request body", buf),
				http.StatusBadRequest,
				nil,
			}
		}
	}

	pathParams := encodePathParams(mux.Vars(r))
	_ = pathParams

	queryParams := r.URL.Query()
	_ = queryParams

	if MisesidAirdropTwitterStrArr, ok := queryParams["misesid"]; ok {
		MisesidAirdropTwitterStr := MisesidAirdropTwitterStrArr[0]
		MisesidAirdropTwitter := MisesidAirdropTwitterStr
		req.Misesid = MisesidAirdropTwitter
	}

	return &req, err
}

// DecodeHTTPAirdropChannelZeroRequest is a transport/http.DecodeRequestFunc that
// decodes a JSON-encoded airdropchannel request from the HTTP request
// body. Primarily useful in a server.
func DecodeHTTPAirdropChannelZeroRequest(_ context.Context, r *http.Request) (interface{}, error) {
	defer r.Body.Close()
	var req pb.AirdropChannelRequest
	buf, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return nil, errors.Wrapf(err, "cannot read body of http request")
	}
	if len(buf) > 0 {
		// AllowUnknownFields stops the unmarshaler from failing if the JSON contains unknown fields.
		unmarshaller := jsonpb.Unmarshaler{
			AllowUnknownFields: true,
		}
		if err = unmarshaller.Unmarshal(bytes.NewBuffer(buf), &req); err != nil {
			const size = 8196
			if len(buf) > size {
				buf = buf[:size]
			}
			return nil, httpError{errors.Wrapf(err, "request body '%s': cannot parse non-json request body", buf),
				http.StatusBadRequest,
				nil,
			}
		}
	}

	pathParams := encodePathParams(mux.Vars(r))
	_ = pathParams

	queryParams := r.URL.Query()
	_ = queryParams

	return &req, err
}

// DecodeHTTPAirdropChannelOneRequest is a transport/http.DecodeRequestFunc that
// decodes a JSON-encoded airdropchannel request from the HTTP request
// body. Primarily useful in a server.
func DecodeHTTPAirdropChannelOneRequest(_ context.Context, r *http.Request) (interface{}, error) {
	defer r.Body.Close()
	var req pb.AirdropChannelRequest
	buf, err := ioutil.ReadAll(r.Body)
	if err != nil {
		return nil, errors.Wrapf(err, "cannot read body of http request")
	}
	if len(buf) > 0 {
		// AllowUnknownFields stops the unmarshaler from failing if the JSON contains unknown fields.
		unmarshaller := jsonpb.Unmarshaler{
			AllowUnknownFields: true,
		}
		if err = unmarshaller.Unmarshal(bytes.NewBuffer(buf), &req); err != nil {
			const size = 8196
			if len(buf) > size {
				buf = buf[:size]
			}
			return nil, httpError{errors.Wrapf(err, "request body '%s': cannot parse non-json request body", buf),
				http.StatusBadRequest,
				nil,
			}
		}
	}

	pathParams := encodePathParams(mux.Vars(r))
	_ = pathParams

	queryParams := r.URL.Query()
	_ = queryParams

	return &req, err
}

// EncodeHTTPGenericResponse is a transport/http.EncodeResponseFunc that encodes
// the response as JSON to the response writer. Primarily useful in a server.
func EncodeHTTPGenericResponse(_ context.Context, w http.ResponseWriter, response interface{}) error {
	marshaller := jsonpb.Marshaler{
		EmitDefaults: false,
		OrigName:     true,
	}

	return marshaller.Marshal(w, response.(proto.Message))
}

// Helper functions

func headersToContext(ctx context.Context, r *http.Request) context.Context {
	for k := range r.Header {
		// The key is added both in http format (k) which has had
		// http.CanonicalHeaderKey called on it in transport as well as the
		// strings.ToLower which is the grpc metadata format of the key so
		// that it can be accessed in either format
		ctx = context.WithValue(ctx, k, r.Header.Get(k))
		ctx = context.WithValue(ctx, strings.ToLower(k), r.Header.Get(k))
	}

	// Tune specific change.
	// also add the request url
	ctx = context.WithValue(ctx, "request-url", r.URL.Path)
	ctx = context.WithValue(ctx, "transport", "HTTPJSON")

	return ctx
}

// encodePathParams encodes `mux.Vars()` with dot notations into JSON objects
// to be unmarshaled into non-basetype fields.
// e.g. {"book.name": "books/1"} -> {"book": {"name": "books/1"}}
func encodePathParams(vars map[string]string) map[string]string {
	var recur func(path, value string, data map[string]interface{})
	recur = func(path, value string, data map[string]interface{}) {
		parts := strings.SplitN(path, ".", 2)
		key := parts[0]
		if len(parts) == 1 {
			data[key] = value
		} else {
			if _, ok := data[key]; !ok {
				data[key] = make(map[string]interface{})
			}
			recur(parts[1], value, data[key].(map[string]interface{}))
		}
	}

	data := make(map[string]interface{})
	for key, val := range vars {
		recur(key, val, data)
	}

	ret := make(map[string]string)
	for key, val := range data {
		switch val := val.(type) {
		case string:
			ret[key] = val
		case map[string]interface{}:
			m, _ := json.Marshal(val)
			ret[key] = string(m)
		}
	}
	return ret
}
