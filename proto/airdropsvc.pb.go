// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: airdropsvc.proto

// The package name determines the name of the directories that truss creates
// for `package echo;` truss will create the directory "echo-service".

package airdropsvc

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/metaverse/truss/deftree/googlethirdparty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type TestRequest struct {
}

func (m *TestRequest) Reset()         { *m = TestRequest{} }
func (m *TestRequest) String() string { return proto.CompactTextString(m) }
func (*TestRequest) ProtoMessage()    {}
func (*TestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89afda3b68868bf, []int{0}
}
func (m *TestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestRequest.Merge(m, src)
}
func (m *TestRequest) XXX_Size() int {
	return m.Size()
}
func (m *TestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TestRequest proto.InternalMessageInfo

type TestResponse struct {
}

func (m *TestResponse) Reset()         { *m = TestResponse{} }
func (m *TestResponse) String() string { return proto.CompactTextString(m) }
func (*TestResponse) ProtoMessage()    {}
func (*TestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89afda3b68868bf, []int{1}
}
func (m *TestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TestResponse.Merge(m, src)
}
func (m *TestResponse) XXX_Size() int {
	return m.Size()
}
func (m *TestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TestResponse proto.InternalMessageInfo

type UserAgent struct {
	Ua       string `protobuf:"bytes,1,opt,name=ua,proto3" json:"ua,omitempty"`
	Ipaddr   string `protobuf:"bytes,2,opt,name=ipaddr,proto3" json:"ipaddr,omitempty"`
	Browser  string `protobuf:"bytes,3,opt,name=browser,proto3" json:"browser,omitempty"`
	Platform string `protobuf:"bytes,4,opt,name=platform,proto3" json:"platform,omitempty"`
	Os       string `protobuf:"bytes,5,opt,name=os,proto3" json:"os,omitempty"`
	DeviceId string `protobuf:"bytes,6,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
}

func (m *UserAgent) Reset()         { *m = UserAgent{} }
func (m *UserAgent) String() string { return proto.CompactTextString(m) }
func (*UserAgent) ProtoMessage()    {}
func (*UserAgent) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89afda3b68868bf, []int{2}
}
func (m *UserAgent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserAgent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserAgent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserAgent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserAgent.Merge(m, src)
}
func (m *UserAgent) XXX_Size() int {
	return m.Size()
}
func (m *UserAgent) XXX_DiscardUnknown() {
	xxx_messageInfo_UserAgent.DiscardUnknown(m)
}

var xxx_messageInfo_UserAgent proto.InternalMessageInfo

func (m *UserAgent) GetUa() string {
	if m != nil {
		return m.Ua
	}
	return ""
}

func (m *UserAgent) GetIpaddr() string {
	if m != nil {
		return m.Ipaddr
	}
	return ""
}

func (m *UserAgent) GetBrowser() string {
	if m != nil {
		return m.Browser
	}
	return ""
}

func (m *UserAgent) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

func (m *UserAgent) GetOs() string {
	if m != nil {
		return m.Os
	}
	return ""
}

func (m *UserAgent) GetDeviceId() string {
	if m != nil {
		return m.DeviceId
	}
	return ""
}

type UserAvatar struct {
	Small      string `protobuf:"bytes,1,opt,name=small,proto3" json:"small,omitempty"`
	Medium     string `protobuf:"bytes,2,opt,name=medium,proto3" json:"medium,omitempty"`
	Large      string `protobuf:"bytes,3,opt,name=large,proto3" json:"large,omitempty"`
	NftAssetId string `protobuf:"bytes,4,opt,name=nft_asset_id,json=nftAssetId,proto3" json:"nft_asset_id,omitempty"`
}

func (m *UserAvatar) Reset()         { *m = UserAvatar{} }
func (m *UserAvatar) String() string { return proto.CompactTextString(m) }
func (*UserAvatar) ProtoMessage()    {}
func (*UserAvatar) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89afda3b68868bf, []int{3}
}
func (m *UserAvatar) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserAvatar) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserAvatar.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserAvatar) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserAvatar.Merge(m, src)
}
func (m *UserAvatar) XXX_Size() int {
	return m.Size()
}
func (m *UserAvatar) XXX_DiscardUnknown() {
	xxx_messageInfo_UserAvatar.DiscardUnknown(m)
}

var xxx_messageInfo_UserAvatar proto.InternalMessageInfo

func (m *UserAvatar) GetSmall() string {
	if m != nil {
		return m.Small
	}
	return ""
}

func (m *UserAvatar) GetMedium() string {
	if m != nil {
		return m.Medium
	}
	return ""
}

func (m *UserAvatar) GetLarge() string {
	if m != nil {
		return m.Large
	}
	return ""
}

func (m *UserAvatar) GetNftAssetId() string {
	if m != nil {
		return m.NftAssetId
	}
	return ""
}

type UserInfo struct {
	Uid             uint64      `protobuf:"varint,1,opt,name=uid,proto3" json:"uid,omitempty"`
	Username        string      `protobuf:"bytes,2,opt,name=username,proto3" json:"username,omitempty"`
	Misesid         string      `protobuf:"bytes,3,opt,name=misesid,proto3" json:"misesid,omitempty"`
	Gender          string      `protobuf:"bytes,4,opt,name=gender,proto3" json:"gender,omitempty"`
	Mobile          string      `protobuf:"bytes,5,opt,name=mobile,proto3" json:"mobile,omitempty"`
	Email           string      `protobuf:"bytes,6,opt,name=email,proto3" json:"email,omitempty"`
	Address         string      `protobuf:"bytes,7,opt,name=address,proto3" json:"address,omitempty"`
	Avatar          string      `protobuf:"bytes,8,opt,name=avatar,proto3" json:"avatar,omitempty"`
	IsFollowed      bool        `protobuf:"varint,9,opt,name=is_followed,json=isFollowed,proto3" json:"is_followed,omitempty"`
	IsBlocked       bool        `protobuf:"varint,10,opt,name=is_blocked,json=isBlocked,proto3" json:"is_blocked,omitempty"`
	FollowingsCount uint32      `protobuf:"varint,11,opt,name=followings_count,json=followingsCount,proto3" json:"followings_count,omitempty"`
	FansCount       uint32      `protobuf:"varint,12,opt,name=fans_count,json=fansCount,proto3" json:"fans_count,omitempty"`
	LikedCount      uint32      `protobuf:"varint,13,opt,name=liked_count,json=likedCount,proto3" json:"liked_count,omitempty"`
	NewFansCount    uint32      `protobuf:"varint,14,opt,name=new_fans_count,json=newFansCount,proto3" json:"new_fans_count,omitempty"`
	AvatarUrl       *UserAvatar `protobuf:"bytes,15,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url,omitempty"`
	IsAirdropped    bool        `protobuf:"varint,16,opt,name=is_airdropped,json=isAirdropped,proto3" json:"is_airdropped,omitempty"`
	AirdropStatus   bool        `protobuf:"varint,17,opt,name=airdrop_status,json=airdropStatus,proto3" json:"airdrop_status,omitempty"`
	IsLogined       bool        `protobuf:"varint,18,opt,name=is_logined,json=isLogined,proto3" json:"is_logined,omitempty"`
	HelpMisesid     string      `protobuf:"bytes,19,opt,name=help_misesid,json=helpMisesid,proto3" json:"help_misesid,omitempty"`
	Intro           string      `protobuf:"bytes,20,opt,name=intro,proto3" json:"intro,omitempty"`
}

func (m *UserInfo) Reset()         { *m = UserInfo{} }
func (m *UserInfo) String() string { return proto.CompactTextString(m) }
func (*UserInfo) ProtoMessage()    {}
func (*UserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89afda3b68868bf, []int{4}
}
func (m *UserInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserInfo.Merge(m, src)
}
func (m *UserInfo) XXX_Size() int {
	return m.Size()
}
func (m *UserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UserInfo proto.InternalMessageInfo

func (m *UserInfo) GetUid() uint64 {
	if m != nil {
		return m.Uid
	}
	return 0
}

func (m *UserInfo) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UserInfo) GetMisesid() string {
	if m != nil {
		return m.Misesid
	}
	return ""
}

func (m *UserInfo) GetGender() string {
	if m != nil {
		return m.Gender
	}
	return ""
}

func (m *UserInfo) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

func (m *UserInfo) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *UserInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *UserInfo) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *UserInfo) GetIsFollowed() bool {
	if m != nil {
		return m.IsFollowed
	}
	return false
}

func (m *UserInfo) GetIsBlocked() bool {
	if m != nil {
		return m.IsBlocked
	}
	return false
}

func (m *UserInfo) GetFollowingsCount() uint32 {
	if m != nil {
		return m.FollowingsCount
	}
	return 0
}

func (m *UserInfo) GetFansCount() uint32 {
	if m != nil {
		return m.FansCount
	}
	return 0
}

func (m *UserInfo) GetLikedCount() uint32 {
	if m != nil {
		return m.LikedCount
	}
	return 0
}

func (m *UserInfo) GetNewFansCount() uint32 {
	if m != nil {
		return m.NewFansCount
	}
	return 0
}

func (m *UserInfo) GetAvatarUrl() *UserAvatar {
	if m != nil {
		return m.AvatarUrl
	}
	return nil
}

func (m *UserInfo) GetIsAirdropped() bool {
	if m != nil {
		return m.IsAirdropped
	}
	return false
}

func (m *UserInfo) GetAirdropStatus() bool {
	if m != nil {
		return m.AirdropStatus
	}
	return false
}

func (m *UserInfo) GetIsLogined() bool {
	if m != nil {
		return m.IsLogined
	}
	return false
}

func (m *UserInfo) GetHelpMisesid() string {
	if m != nil {
		return m.HelpMisesid
	}
	return ""
}

func (m *UserInfo) GetIntro() string {
	if m != nil {
		return m.Intro
	}
	return ""
}

type PageQuick struct {
	Limit  uint64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	NextId string `protobuf:"bytes,2,opt,name=next_id,json=nextId,proto3" json:"next_id,omitempty"`
	Total  uint64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *PageQuick) Reset()         { *m = PageQuick{} }
func (m *PageQuick) String() string { return proto.CompactTextString(m) }
func (*PageQuick) ProtoMessage()    {}
func (*PageQuick) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89afda3b68868bf, []int{5}
}
func (m *PageQuick) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PageQuick) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PageQuick.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PageQuick) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageQuick.Merge(m, src)
}
func (m *PageQuick) XXX_Size() int {
	return m.Size()
}
func (m *PageQuick) XXX_DiscardUnknown() {
	xxx_messageInfo_PageQuick.DiscardUnknown(m)
}

var xxx_messageInfo_PageQuick proto.InternalMessageInfo

func (m *PageQuick) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *PageQuick) GetNextId() string {
	if m != nil {
		return m.NextId
	}
	return ""
}

func (m *PageQuick) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type Page struct {
	TotalRecords uint64 `protobuf:"varint,1,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
	PageSize     uint64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageNum      uint64 `protobuf:"varint,3,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	TotalPage    uint64 `protobuf:"varint,4,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"`
}

func (m *Page) Reset()         { *m = Page{} }
func (m *Page) String() string { return proto.CompactTextString(m) }
func (*Page) ProtoMessage()    {}
func (*Page) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89afda3b68868bf, []int{6}
}
func (m *Page) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Page) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Page.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Page) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Page.Merge(m, src)
}
func (m *Page) XXX_Size() int {
	return m.Size()
}
func (m *Page) XXX_DiscardUnknown() {
	xxx_messageInfo_Page.DiscardUnknown(m)
}

var xxx_messageInfo_Page proto.InternalMessageInfo

func (m *Page) GetTotalRecords() uint64 {
	if m != nil {
		return m.TotalRecords
	}
	return 0
}

func (m *Page) GetPageSize() uint64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *Page) GetPageNum() uint64 {
	if m != nil {
		return m.PageNum
	}
	return 0
}

func (m *Page) GetTotalPage() uint64 {
	if m != nil {
		return m.TotalPage
	}
	return 0
}

type AirdropTwitterRequest struct {
	Misesid string `protobuf:"bytes,1,opt,name=misesid,proto3" json:"misesid,omitempty"`
}

func (m *AirdropTwitterRequest) Reset()         { *m = AirdropTwitterRequest{} }
func (m *AirdropTwitterRequest) String() string { return proto.CompactTextString(m) }
func (*AirdropTwitterRequest) ProtoMessage()    {}
func (*AirdropTwitterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89afda3b68868bf, []int{7}
}
func (m *AirdropTwitterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AirdropTwitterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AirdropTwitterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AirdropTwitterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AirdropTwitterRequest.Merge(m, src)
}
func (m *AirdropTwitterRequest) XXX_Size() int {
	return m.Size()
}
func (m *AirdropTwitterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AirdropTwitterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AirdropTwitterRequest proto.InternalMessageInfo

func (m *AirdropTwitterRequest) GetMisesid() string {
	if m != nil {
		return m.Misesid
	}
	return ""
}

type AirdropTwitterResponse struct {
}

func (m *AirdropTwitterResponse) Reset()         { *m = AirdropTwitterResponse{} }
func (m *AirdropTwitterResponse) String() string { return proto.CompactTextString(m) }
func (*AirdropTwitterResponse) ProtoMessage()    {}
func (*AirdropTwitterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89afda3b68868bf, []int{8}
}
func (m *AirdropTwitterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AirdropTwitterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AirdropTwitterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AirdropTwitterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AirdropTwitterResponse.Merge(m, src)
}
func (m *AirdropTwitterResponse) XXX_Size() int {
	return m.Size()
}
func (m *AirdropTwitterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AirdropTwitterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AirdropTwitterResponse proto.InternalMessageInfo

type AirdropChannelRequest struct {
}

func (m *AirdropChannelRequest) Reset()         { *m = AirdropChannelRequest{} }
func (m *AirdropChannelRequest) String() string { return proto.CompactTextString(m) }
func (*AirdropChannelRequest) ProtoMessage()    {}
func (*AirdropChannelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89afda3b68868bf, []int{9}
}
func (m *AirdropChannelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AirdropChannelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AirdropChannelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AirdropChannelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AirdropChannelRequest.Merge(m, src)
}
func (m *AirdropChannelRequest) XXX_Size() int {
	return m.Size()
}
func (m *AirdropChannelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AirdropChannelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AirdropChannelRequest proto.InternalMessageInfo

type AirdropChannelResponse struct {
}

func (m *AirdropChannelResponse) Reset()         { *m = AirdropChannelResponse{} }
func (m *AirdropChannelResponse) String() string { return proto.CompactTextString(m) }
func (*AirdropChannelResponse) ProtoMessage()    {}
func (*AirdropChannelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89afda3b68868bf, []int{10}
}
func (m *AirdropChannelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AirdropChannelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AirdropChannelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AirdropChannelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AirdropChannelResponse.Merge(m, src)
}
func (m *AirdropChannelResponse) XXX_Size() int {
	return m.Size()
}
func (m *AirdropChannelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AirdropChannelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AirdropChannelResponse proto.InternalMessageInfo

type TwitterFollowRequest struct {
}

func (m *TwitterFollowRequest) Reset()         { *m = TwitterFollowRequest{} }
func (m *TwitterFollowRequest) String() string { return proto.CompactTextString(m) }
func (*TwitterFollowRequest) ProtoMessage()    {}
func (*TwitterFollowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89afda3b68868bf, []int{11}
}
func (m *TwitterFollowRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TwitterFollowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TwitterFollowRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TwitterFollowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TwitterFollowRequest.Merge(m, src)
}
func (m *TwitterFollowRequest) XXX_Size() int {
	return m.Size()
}
func (m *TwitterFollowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TwitterFollowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TwitterFollowRequest proto.InternalMessageInfo

type TwitterFollowResponse struct {
	Code uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *TwitterFollowResponse) Reset()         { *m = TwitterFollowResponse{} }
func (m *TwitterFollowResponse) String() string { return proto.CompactTextString(m) }
func (*TwitterFollowResponse) ProtoMessage()    {}
func (*TwitterFollowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89afda3b68868bf, []int{12}
}
func (m *TwitterFollowResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TwitterFollowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TwitterFollowResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TwitterFollowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TwitterFollowResponse.Merge(m, src)
}
func (m *TwitterFollowResponse) XXX_Size() int {
	return m.Size()
}
func (m *TwitterFollowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TwitterFollowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TwitterFollowResponse proto.InternalMessageInfo

func (m *TwitterFollowResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type SendTweetRequest struct {
}

func (m *SendTweetRequest) Reset()         { *m = SendTweetRequest{} }
func (m *SendTweetRequest) String() string { return proto.CompactTextString(m) }
func (*SendTweetRequest) ProtoMessage()    {}
func (*SendTweetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89afda3b68868bf, []int{13}
}
func (m *SendTweetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendTweetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendTweetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendTweetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendTweetRequest.Merge(m, src)
}
func (m *SendTweetRequest) XXX_Size() int {
	return m.Size()
}
func (m *SendTweetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SendTweetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SendTweetRequest proto.InternalMessageInfo

type SendTweetResponse struct {
	Code uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *SendTweetResponse) Reset()         { *m = SendTweetResponse{} }
func (m *SendTweetResponse) String() string { return proto.CompactTextString(m) }
func (*SendTweetResponse) ProtoMessage()    {}
func (*SendTweetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89afda3b68868bf, []int{14}
}
func (m *SendTweetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SendTweetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SendTweetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SendTweetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SendTweetResponse.Merge(m, src)
}
func (m *SendTweetResponse) XXX_Size() int {
	return m.Size()
}
func (m *SendTweetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SendTweetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SendTweetResponse proto.InternalMessageInfo

func (m *SendTweetResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type LikeTweetRequest struct {
}

func (m *LikeTweetRequest) Reset()         { *m = LikeTweetRequest{} }
func (m *LikeTweetRequest) String() string { return proto.CompactTextString(m) }
func (*LikeTweetRequest) ProtoMessage()    {}
func (*LikeTweetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89afda3b68868bf, []int{15}
}
func (m *LikeTweetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LikeTweetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LikeTweetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LikeTweetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LikeTweetRequest.Merge(m, src)
}
func (m *LikeTweetRequest) XXX_Size() int {
	return m.Size()
}
func (m *LikeTweetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LikeTweetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LikeTweetRequest proto.InternalMessageInfo

type LikeTweetResponse struct {
	Code uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *LikeTweetResponse) Reset()         { *m = LikeTweetResponse{} }
func (m *LikeTweetResponse) String() string { return proto.CompactTextString(m) }
func (*LikeTweetResponse) ProtoMessage()    {}
func (*LikeTweetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89afda3b68868bf, []int{16}
}
func (m *LikeTweetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LikeTweetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LikeTweetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LikeTweetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LikeTweetResponse.Merge(m, src)
}
func (m *LikeTweetResponse) XXX_Size() int {
	return m.Size()
}
func (m *LikeTweetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LikeTweetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LikeTweetResponse proto.InternalMessageInfo

func (m *LikeTweetResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type ReplyTweetRequest struct {
}

func (m *ReplyTweetRequest) Reset()         { *m = ReplyTweetRequest{} }
func (m *ReplyTweetRequest) String() string { return proto.CompactTextString(m) }
func (*ReplyTweetRequest) ProtoMessage()    {}
func (*ReplyTweetRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89afda3b68868bf, []int{17}
}
func (m *ReplyTweetRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplyTweetRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplyTweetRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplyTweetRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyTweetRequest.Merge(m, src)
}
func (m *ReplyTweetRequest) XXX_Size() int {
	return m.Size()
}
func (m *ReplyTweetRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyTweetRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyTweetRequest proto.InternalMessageInfo

type ReplyTweetResponse struct {
	Code uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *ReplyTweetResponse) Reset()         { *m = ReplyTweetResponse{} }
func (m *ReplyTweetResponse) String() string { return proto.CompactTextString(m) }
func (*ReplyTweetResponse) ProtoMessage()    {}
func (*ReplyTweetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89afda3b68868bf, []int{18}
}
func (m *ReplyTweetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReplyTweetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReplyTweetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReplyTweetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReplyTweetResponse.Merge(m, src)
}
func (m *ReplyTweetResponse) XXX_Size() int {
	return m.Size()
}
func (m *ReplyTweetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReplyTweetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReplyTweetResponse proto.InternalMessageInfo

func (m *ReplyTweetResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type CheckTwitterUserRequest struct {
}

func (m *CheckTwitterUserRequest) Reset()         { *m = CheckTwitterUserRequest{} }
func (m *CheckTwitterUserRequest) String() string { return proto.CompactTextString(m) }
func (*CheckTwitterUserRequest) ProtoMessage()    {}
func (*CheckTwitterUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89afda3b68868bf, []int{19}
}
func (m *CheckTwitterUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckTwitterUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckTwitterUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckTwitterUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckTwitterUserRequest.Merge(m, src)
}
func (m *CheckTwitterUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *CheckTwitterUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckTwitterUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckTwitterUserRequest proto.InternalMessageInfo

type CheckTwitterUserResponse struct {
	Code uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *CheckTwitterUserResponse) Reset()         { *m = CheckTwitterUserResponse{} }
func (m *CheckTwitterUserResponse) String() string { return proto.CompactTextString(m) }
func (*CheckTwitterUserResponse) ProtoMessage()    {}
func (*CheckTwitterUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89afda3b68868bf, []int{20}
}
func (m *CheckTwitterUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CheckTwitterUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CheckTwitterUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CheckTwitterUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckTwitterUserResponse.Merge(m, src)
}
func (m *CheckTwitterUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *CheckTwitterUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckTwitterUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckTwitterUserResponse proto.InternalMessageInfo

func (m *CheckTwitterUserResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type LookupTwitterRequest struct {
}

func (m *LookupTwitterRequest) Reset()         { *m = LookupTwitterRequest{} }
func (m *LookupTwitterRequest) String() string { return proto.CompactTextString(m) }
func (*LookupTwitterRequest) ProtoMessage()    {}
func (*LookupTwitterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89afda3b68868bf, []int{21}
}
func (m *LookupTwitterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupTwitterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LookupTwitterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LookupTwitterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupTwitterRequest.Merge(m, src)
}
func (m *LookupTwitterRequest) XXX_Size() int {
	return m.Size()
}
func (m *LookupTwitterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupTwitterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LookupTwitterRequest proto.InternalMessageInfo

type LookupTwitterResponse struct {
	Code uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *LookupTwitterResponse) Reset()         { *m = LookupTwitterResponse{} }
func (m *LookupTwitterResponse) String() string { return proto.CompactTextString(m) }
func (*LookupTwitterResponse) ProtoMessage()    {}
func (*LookupTwitterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89afda3b68868bf, []int{22}
}
func (m *LookupTwitterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LookupTwitterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LookupTwitterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LookupTwitterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LookupTwitterResponse.Merge(m, src)
}
func (m *LookupTwitterResponse) XXX_Size() int {
	return m.Size()
}
func (m *LookupTwitterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LookupTwitterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LookupTwitterResponse proto.InternalMessageInfo

func (m *LookupTwitterResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type ChannelInfoRequest struct {
	Misesid string `protobuf:"bytes,1,opt,name=misesid,proto3" json:"misesid,omitempty"`
	Type    string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Medium  string `protobuf:"bytes,3,opt,name=medium,proto3" json:"medium,omitempty"`
}

func (m *ChannelInfoRequest) Reset()         { *m = ChannelInfoRequest{} }
func (m *ChannelInfoRequest) String() string { return proto.CompactTextString(m) }
func (*ChannelInfoRequest) ProtoMessage()    {}
func (*ChannelInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89afda3b68868bf, []int{23}
}
func (m *ChannelInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelInfoRequest.Merge(m, src)
}
func (m *ChannelInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *ChannelInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelInfoRequest proto.InternalMessageInfo

func (m *ChannelInfoRequest) GetMisesid() string {
	if m != nil {
		return m.Misesid
	}
	return ""
}

func (m *ChannelInfoRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ChannelInfoRequest) GetMedium() string {
	if m != nil {
		return m.Medium
	}
	return ""
}

type ChannelInfoResponse struct {
	Code             uint64  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Url              string  `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	TotalChannelUser uint64  `protobuf:"varint,3,opt,name=total_channel_user,json=totalChannelUser,proto3" json:"total_channel_user,omitempty"`
	AirdropAmount    float32 `protobuf:"fixed32,4,opt,name=airdrop_amount,json=airdropAmount,proto3" json:"airdrop_amount,omitempty"`
	MediumUrl        string  `protobuf:"bytes,5,opt,name=medium_url,json=mediumUrl,proto3" json:"medium_url,omitempty"`
	IosLink          string  `protobuf:"bytes,6,opt,name=ios_link,json=iosLink,proto3" json:"ios_link,omitempty"`
	IosMediumLink    string  `protobuf:"bytes,7,opt,name=ios_medium_link,json=iosMediumLink,proto3" json:"ios_medium_link,omitempty"`
}

func (m *ChannelInfoResponse) Reset()         { *m = ChannelInfoResponse{} }
func (m *ChannelInfoResponse) String() string { return proto.CompactTextString(m) }
func (*ChannelInfoResponse) ProtoMessage()    {}
func (*ChannelInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89afda3b68868bf, []int{24}
}
func (m *ChannelInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelInfoResponse.Merge(m, src)
}
func (m *ChannelInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *ChannelInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelInfoResponse proto.InternalMessageInfo

func (m *ChannelInfoResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ChannelInfoResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *ChannelInfoResponse) GetTotalChannelUser() uint64 {
	if m != nil {
		return m.TotalChannelUser
	}
	return 0
}

func (m *ChannelInfoResponse) GetAirdropAmount() float32 {
	if m != nil {
		return m.AirdropAmount
	}
	return 0
}

func (m *ChannelInfoResponse) GetMediumUrl() string {
	if m != nil {
		return m.MediumUrl
	}
	return ""
}

func (m *ChannelInfoResponse) GetIosLink() string {
	if m != nil {
		return m.IosLink
	}
	return ""
}

func (m *ChannelInfoResponse) GetIosMediumLink() string {
	if m != nil {
		return m.IosMediumLink
	}
	return ""
}

type GetChannelUserRequest struct {
	Misesid string `protobuf:"bytes,1,opt,name=misesid,proto3" json:"misesid,omitempty"`
}

func (m *GetChannelUserRequest) Reset()         { *m = GetChannelUserRequest{} }
func (m *GetChannelUserRequest) String() string { return proto.CompactTextString(m) }
func (*GetChannelUserRequest) ProtoMessage()    {}
func (*GetChannelUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89afda3b68868bf, []int{25}
}
func (m *GetChannelUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetChannelUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetChannelUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetChannelUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetChannelUserRequest.Merge(m, src)
}
func (m *GetChannelUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetChannelUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetChannelUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetChannelUserRequest proto.InternalMessageInfo

func (m *GetChannelUserRequest) GetMisesid() string {
	if m != nil {
		return m.Misesid
	}
	return ""
}

type PageChannelUserResponse struct {
	Code         uint64             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	ChannelUsers []*ChannelUserInfo `protobuf:"bytes,2,rep,name=channel_users,json=channelUsers,proto3" json:"channel_users,omitempty"`
	Paginator    *Page              `protobuf:"bytes,3,opt,name=paginator,proto3" json:"paginator,omitempty"`
}

func (m *PageChannelUserResponse) Reset()         { *m = PageChannelUserResponse{} }
func (m *PageChannelUserResponse) String() string { return proto.CompactTextString(m) }
func (*PageChannelUserResponse) ProtoMessage()    {}
func (*PageChannelUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89afda3b68868bf, []int{26}
}
func (m *PageChannelUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PageChannelUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PageChannelUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PageChannelUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageChannelUserResponse.Merge(m, src)
}
func (m *PageChannelUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *PageChannelUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PageChannelUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PageChannelUserResponse proto.InternalMessageInfo

func (m *PageChannelUserResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *PageChannelUserResponse) GetChannelUsers() []*ChannelUserInfo {
	if m != nil {
		return m.ChannelUsers
	}
	return nil
}

func (m *PageChannelUserResponse) GetPaginator() *Page {
	if m != nil {
		return m.Paginator
	}
	return nil
}

type PageChannelUserRequest struct {
	Misesid   string `protobuf:"bytes,1,opt,name=misesid,proto3" json:"misesid,omitempty"`
	Paginator *Page  `protobuf:"bytes,2,opt,name=paginator,proto3" json:"paginator,omitempty"`
}

func (m *PageChannelUserRequest) Reset()         { *m = PageChannelUserRequest{} }
func (m *PageChannelUserRequest) String() string { return proto.CompactTextString(m) }
func (*PageChannelUserRequest) ProtoMessage()    {}
func (*PageChannelUserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89afda3b68868bf, []int{27}
}
func (m *PageChannelUserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PageChannelUserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PageChannelUserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PageChannelUserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageChannelUserRequest.Merge(m, src)
}
func (m *PageChannelUserRequest) XXX_Size() int {
	return m.Size()
}
func (m *PageChannelUserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PageChannelUserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PageChannelUserRequest proto.InternalMessageInfo

func (m *PageChannelUserRequest) GetMisesid() string {
	if m != nil {
		return m.Misesid
	}
	return ""
}

func (m *PageChannelUserRequest) GetPaginator() *Page {
	if m != nil {
		return m.Paginator
	}
	return nil
}

type ChannelUserInfo struct {
	Id             string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ChannelId      string    `protobuf:"bytes,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	ValidState     int32     `protobuf:"varint,3,opt,name=valid_state,json=validState,proto3" json:"valid_state,omitempty"`
	Amount         uint64    `protobuf:"varint,4,opt,name=amount,proto3" json:"amount,omitempty"`
	TxId           string    `protobuf:"bytes,5,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
	User           *UserInfo `protobuf:"bytes,6,opt,name=user,proto3" json:"user,omitempty"`
	AirdropState   int32     `protobuf:"varint,7,opt,name=airdrop_state,json=airdropState,proto3" json:"airdrop_state,omitempty"`
	AirdropTime    uint64    `protobuf:"varint,8,opt,name=airdrop_time,json=airdropTime,proto3" json:"airdrop_time,omitempty"`
	CreatedAt      uint64    `protobuf:"varint,9,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	ChannelUid     uint64    `protobuf:"varint,10,opt,name=channel_uid,json=channelUid,proto3" json:"channel_uid,omitempty"`
	ChannelMisesid string    `protobuf:"bytes,11,opt,name=channel_misesid,json=channelMisesid,proto3" json:"channel_misesid,omitempty"`
}

func (m *ChannelUserInfo) Reset()         { *m = ChannelUserInfo{} }
func (m *ChannelUserInfo) String() string { return proto.CompactTextString(m) }
func (*ChannelUserInfo) ProtoMessage()    {}
func (*ChannelUserInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89afda3b68868bf, []int{28}
}
func (m *ChannelUserInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelUserInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelUserInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelUserInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelUserInfo.Merge(m, src)
}
func (m *ChannelUserInfo) XXX_Size() int {
	return m.Size()
}
func (m *ChannelUserInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelUserInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelUserInfo proto.InternalMessageInfo

func (m *ChannelUserInfo) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *ChannelUserInfo) GetChannelId() string {
	if m != nil {
		return m.ChannelId
	}
	return ""
}

func (m *ChannelUserInfo) GetValidState() int32 {
	if m != nil {
		return m.ValidState
	}
	return 0
}

func (m *ChannelUserInfo) GetAmount() uint64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *ChannelUserInfo) GetTxId() string {
	if m != nil {
		return m.TxId
	}
	return ""
}

func (m *ChannelUserInfo) GetUser() *UserInfo {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *ChannelUserInfo) GetAirdropState() int32 {
	if m != nil {
		return m.AirdropState
	}
	return 0
}

func (m *ChannelUserInfo) GetAirdropTime() uint64 {
	if m != nil {
		return m.AirdropTime
	}
	return 0
}

func (m *ChannelUserInfo) GetCreatedAt() uint64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *ChannelUserInfo) GetChannelUid() uint64 {
	if m != nil {
		return m.ChannelUid
	}
	return 0
}

func (m *ChannelUserInfo) GetChannelMisesid() string {
	if m != nil {
		return m.ChannelMisesid
	}
	return ""
}

type GetChannelUserResponse struct {
	Code       uint64           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	ChanelUser *ChannelUserInfo `protobuf:"bytes,2,opt,name=chanel_user,json=chanelUser,proto3" json:"chanel_user,omitempty"`
}

func (m *GetChannelUserResponse) Reset()         { *m = GetChannelUserResponse{} }
func (m *GetChannelUserResponse) String() string { return proto.CompactTextString(m) }
func (*GetChannelUserResponse) ProtoMessage()    {}
func (*GetChannelUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89afda3b68868bf, []int{29}
}
func (m *GetChannelUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetChannelUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetChannelUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetChannelUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetChannelUserResponse.Merge(m, src)
}
func (m *GetChannelUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetChannelUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetChannelUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetChannelUserResponse proto.InternalMessageInfo

func (m *GetChannelUserResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetChannelUserResponse) GetChanelUser() *ChannelUserInfo {
	if m != nil {
		return m.ChanelUser
	}
	return nil
}

type GetTwitterAuthUrlRequest struct {
	CurrentUid uint64     `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
	UserAgent  *UserAgent `protobuf:"bytes,2,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
}

func (m *GetTwitterAuthUrlRequest) Reset()         { *m = GetTwitterAuthUrlRequest{} }
func (m *GetTwitterAuthUrlRequest) String() string { return proto.CompactTextString(m) }
func (*GetTwitterAuthUrlRequest) ProtoMessage()    {}
func (*GetTwitterAuthUrlRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89afda3b68868bf, []int{30}
}
func (m *GetTwitterAuthUrlRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTwitterAuthUrlRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTwitterAuthUrlRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTwitterAuthUrlRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTwitterAuthUrlRequest.Merge(m, src)
}
func (m *GetTwitterAuthUrlRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetTwitterAuthUrlRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTwitterAuthUrlRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTwitterAuthUrlRequest proto.InternalMessageInfo

func (m *GetTwitterAuthUrlRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

func (m *GetTwitterAuthUrlRequest) GetUserAgent() *UserAgent {
	if m != nil {
		return m.UserAgent
	}
	return nil
}

type GetTwitterAuthUrlResponse struct {
	Code uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Url  string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *GetTwitterAuthUrlResponse) Reset()         { *m = GetTwitterAuthUrlResponse{} }
func (m *GetTwitterAuthUrlResponse) String() string { return proto.CompactTextString(m) }
func (*GetTwitterAuthUrlResponse) ProtoMessage()    {}
func (*GetTwitterAuthUrlResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89afda3b68868bf, []int{31}
}
func (m *GetTwitterAuthUrlResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTwitterAuthUrlResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTwitterAuthUrlResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTwitterAuthUrlResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTwitterAuthUrlResponse.Merge(m, src)
}
func (m *GetTwitterAuthUrlResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTwitterAuthUrlResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTwitterAuthUrlResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTwitterAuthUrlResponse proto.InternalMessageInfo

func (m *GetTwitterAuthUrlResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetTwitterAuthUrlResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type UserTwitterAuth struct {
	TwitterUserId    string  `protobuf:"bytes,1,opt,name=twitter_user_id,json=twitterUserId,proto3" json:"twitter_user_id,omitempty"`
	Name             string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Username         string  `protobuf:"bytes,3,opt,name=username,proto3" json:"username,omitempty"`
	FollowersCount   uint64  `protobuf:"varint,4,opt,name=followers_count,json=followersCount,proto3" json:"followers_count,omitempty"`
	TweetCount       uint64  `protobuf:"varint,5,opt,name=tweet_count,json=tweetCount,proto3" json:"tweet_count,omitempty"`
	TwitterCreatedAt uint64  `protobuf:"varint,6,opt,name=twitter_created_at,json=twitterCreatedAt,proto3" json:"twitter_created_at,omitempty"`
	Amount           float32 `protobuf:"fixed32,7,opt,name=amount,proto3" json:"amount,omitempty"`
	CreatedAt        uint64  `protobuf:"varint,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	Misesid          string  `protobuf:"bytes,9,opt,name=misesid,proto3" json:"misesid,omitempty"`
}

func (m *UserTwitterAuth) Reset()         { *m = UserTwitterAuth{} }
func (m *UserTwitterAuth) String() string { return proto.CompactTextString(m) }
func (*UserTwitterAuth) ProtoMessage()    {}
func (*UserTwitterAuth) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89afda3b68868bf, []int{32}
}
func (m *UserTwitterAuth) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserTwitterAuth) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserTwitterAuth.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserTwitterAuth) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserTwitterAuth.Merge(m, src)
}
func (m *UserTwitterAuth) XXX_Size() int {
	return m.Size()
}
func (m *UserTwitterAuth) XXX_DiscardUnknown() {
	xxx_messageInfo_UserTwitterAuth.DiscardUnknown(m)
}

var xxx_messageInfo_UserTwitterAuth proto.InternalMessageInfo

func (m *UserTwitterAuth) GetTwitterUserId() string {
	if m != nil {
		return m.TwitterUserId
	}
	return ""
}

func (m *UserTwitterAuth) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UserTwitterAuth) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *UserTwitterAuth) GetFollowersCount() uint64 {
	if m != nil {
		return m.FollowersCount
	}
	return 0
}

func (m *UserTwitterAuth) GetTweetCount() uint64 {
	if m != nil {
		return m.TweetCount
	}
	return 0
}

func (m *UserTwitterAuth) GetTwitterCreatedAt() uint64 {
	if m != nil {
		return m.TwitterCreatedAt
	}
	return 0
}

func (m *UserTwitterAuth) GetAmount() float32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func (m *UserTwitterAuth) GetCreatedAt() uint64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *UserTwitterAuth) GetMisesid() string {
	if m != nil {
		return m.Misesid
	}
	return ""
}

type Airdrop struct {
	Coin      float32 `protobuf:"fixed32,1,opt,name=coin,proto3" json:"coin,omitempty"`
	CreatedAt uint64  `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	FinishAt  uint64  `protobuf:"varint,3,opt,name=finish_at,json=finishAt,proto3" json:"finish_at,omitempty"`
	Status    string  `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *Airdrop) Reset()         { *m = Airdrop{} }
func (m *Airdrop) String() string { return proto.CompactTextString(m) }
func (*Airdrop) ProtoMessage()    {}
func (*Airdrop) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89afda3b68868bf, []int{33}
}
func (m *Airdrop) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Airdrop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Airdrop.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Airdrop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Airdrop.Merge(m, src)
}
func (m *Airdrop) XXX_Size() int {
	return m.Size()
}
func (m *Airdrop) XXX_DiscardUnknown() {
	xxx_messageInfo_Airdrop.DiscardUnknown(m)
}

var xxx_messageInfo_Airdrop proto.InternalMessageInfo

func (m *Airdrop) GetCoin() float32 {
	if m != nil {
		return m.Coin
	}
	return 0
}

func (m *Airdrop) GetCreatedAt() uint64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Airdrop) GetFinishAt() uint64 {
	if m != nil {
		return m.FinishAt
	}
	return 0
}

func (m *Airdrop) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

type GetAirdropInfoRequest struct {
	CurrentUid uint64 `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
}

func (m *GetAirdropInfoRequest) Reset()         { *m = GetAirdropInfoRequest{} }
func (m *GetAirdropInfoRequest) String() string { return proto.CompactTextString(m) }
func (*GetAirdropInfoRequest) ProtoMessage()    {}
func (*GetAirdropInfoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89afda3b68868bf, []int{34}
}
func (m *GetAirdropInfoRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAirdropInfoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAirdropInfoRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAirdropInfoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAirdropInfoRequest.Merge(m, src)
}
func (m *GetAirdropInfoRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAirdropInfoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAirdropInfoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAirdropInfoRequest proto.InternalMessageInfo

func (m *GetAirdropInfoRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

type GetAirdropInfoResponse struct {
	Code    uint64           `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Twitter *UserTwitterAuth `protobuf:"bytes,2,opt,name=twitter,proto3" json:"twitter,omitempty"`
	Airdrop *Airdrop         `protobuf:"bytes,3,opt,name=airdrop,proto3" json:"airdrop,omitempty"`
}

func (m *GetAirdropInfoResponse) Reset()         { *m = GetAirdropInfoResponse{} }
func (m *GetAirdropInfoResponse) String() string { return proto.CompactTextString(m) }
func (*GetAirdropInfoResponse) ProtoMessage()    {}
func (*GetAirdropInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89afda3b68868bf, []int{35}
}
func (m *GetAirdropInfoResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAirdropInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAirdropInfoResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAirdropInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAirdropInfoResponse.Merge(m, src)
}
func (m *GetAirdropInfoResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAirdropInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAirdropInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAirdropInfoResponse proto.InternalMessageInfo

func (m *GetAirdropInfoResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *GetAirdropInfoResponse) GetTwitter() *UserTwitterAuth {
	if m != nil {
		return m.Twitter
	}
	return nil
}

func (m *GetAirdropInfoResponse) GetAirdrop() *Airdrop {
	if m != nil {
		return m.Airdrop
	}
	return nil
}

type TwitterCallbackRequest struct {
	CurrentUid    uint64     `protobuf:"varint,1,opt,name=current_uid,json=currentUid,proto3" json:"current_uid,omitempty"`
	OauthToken    string     `protobuf:"bytes,2,opt,name=oauth_token,json=oauthToken,proto3" json:"oauth_token,omitempty"`
	OauthVerifier string     `protobuf:"bytes,3,opt,name=oauth_verifier,json=oauthVerifier,proto3" json:"oauth_verifier,omitempty"`
	UserAgent     *UserAgent `protobuf:"bytes,4,opt,name=user_agent,json=userAgent,proto3" json:"user_agent,omitempty"`
	State         string     `protobuf:"bytes,5,opt,name=state,proto3" json:"state,omitempty"`
}

func (m *TwitterCallbackRequest) Reset()         { *m = TwitterCallbackRequest{} }
func (m *TwitterCallbackRequest) String() string { return proto.CompactTextString(m) }
func (*TwitterCallbackRequest) ProtoMessage()    {}
func (*TwitterCallbackRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89afda3b68868bf, []int{36}
}
func (m *TwitterCallbackRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TwitterCallbackRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TwitterCallbackRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TwitterCallbackRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TwitterCallbackRequest.Merge(m, src)
}
func (m *TwitterCallbackRequest) XXX_Size() int {
	return m.Size()
}
func (m *TwitterCallbackRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TwitterCallbackRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TwitterCallbackRequest proto.InternalMessageInfo

func (m *TwitterCallbackRequest) GetCurrentUid() uint64 {
	if m != nil {
		return m.CurrentUid
	}
	return 0
}

func (m *TwitterCallbackRequest) GetOauthToken() string {
	if m != nil {
		return m.OauthToken
	}
	return ""
}

func (m *TwitterCallbackRequest) GetOauthVerifier() string {
	if m != nil {
		return m.OauthVerifier
	}
	return ""
}

func (m *TwitterCallbackRequest) GetUserAgent() *UserAgent {
	if m != nil {
		return m.UserAgent
	}
	return nil
}

func (m *TwitterCallbackRequest) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

type TwitterCallbackResponse struct {
	Code uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Url  string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
}

func (m *TwitterCallbackResponse) Reset()         { *m = TwitterCallbackResponse{} }
func (m *TwitterCallbackResponse) String() string { return proto.CompactTextString(m) }
func (*TwitterCallbackResponse) ProtoMessage()    {}
func (*TwitterCallbackResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c89afda3b68868bf, []int{37}
}
func (m *TwitterCallbackResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TwitterCallbackResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TwitterCallbackResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TwitterCallbackResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TwitterCallbackResponse.Merge(m, src)
}
func (m *TwitterCallbackResponse) XXX_Size() int {
	return m.Size()
}
func (m *TwitterCallbackResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TwitterCallbackResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TwitterCallbackResponse proto.InternalMessageInfo

func (m *TwitterCallbackResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *TwitterCallbackResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func init() {
	proto.RegisterType((*TestRequest)(nil), "airdropsvc.TestRequest")
	proto.RegisterType((*TestResponse)(nil), "airdropsvc.TestResponse")
	proto.RegisterType((*UserAgent)(nil), "airdropsvc.UserAgent")
	proto.RegisterType((*UserAvatar)(nil), "airdropsvc.UserAvatar")
	proto.RegisterType((*UserInfo)(nil), "airdropsvc.UserInfo")
	proto.RegisterType((*PageQuick)(nil), "airdropsvc.PageQuick")
	proto.RegisterType((*Page)(nil), "airdropsvc.Page")
	proto.RegisterType((*AirdropTwitterRequest)(nil), "airdropsvc.AirdropTwitterRequest")
	proto.RegisterType((*AirdropTwitterResponse)(nil), "airdropsvc.AirdropTwitterResponse")
	proto.RegisterType((*AirdropChannelRequest)(nil), "airdropsvc.AirdropChannelRequest")
	proto.RegisterType((*AirdropChannelResponse)(nil), "airdropsvc.AirdropChannelResponse")
	proto.RegisterType((*TwitterFollowRequest)(nil), "airdropsvc.TwitterFollowRequest")
	proto.RegisterType((*TwitterFollowResponse)(nil), "airdropsvc.TwitterFollowResponse")
	proto.RegisterType((*SendTweetRequest)(nil), "airdropsvc.SendTweetRequest")
	proto.RegisterType((*SendTweetResponse)(nil), "airdropsvc.SendTweetResponse")
	proto.RegisterType((*LikeTweetRequest)(nil), "airdropsvc.LikeTweetRequest")
	proto.RegisterType((*LikeTweetResponse)(nil), "airdropsvc.LikeTweetResponse")
	proto.RegisterType((*ReplyTweetRequest)(nil), "airdropsvc.ReplyTweetRequest")
	proto.RegisterType((*ReplyTweetResponse)(nil), "airdropsvc.ReplyTweetResponse")
	proto.RegisterType((*CheckTwitterUserRequest)(nil), "airdropsvc.CheckTwitterUserRequest")
	proto.RegisterType((*CheckTwitterUserResponse)(nil), "airdropsvc.CheckTwitterUserResponse")
	proto.RegisterType((*LookupTwitterRequest)(nil), "airdropsvc.LookupTwitterRequest")
	proto.RegisterType((*LookupTwitterResponse)(nil), "airdropsvc.LookupTwitterResponse")
	proto.RegisterType((*ChannelInfoRequest)(nil), "airdropsvc.ChannelInfoRequest")
	proto.RegisterType((*ChannelInfoResponse)(nil), "airdropsvc.ChannelInfoResponse")
	proto.RegisterType((*GetChannelUserRequest)(nil), "airdropsvc.GetChannelUserRequest")
	proto.RegisterType((*PageChannelUserResponse)(nil), "airdropsvc.PageChannelUserResponse")
	proto.RegisterType((*PageChannelUserRequest)(nil), "airdropsvc.PageChannelUserRequest")
	proto.RegisterType((*ChannelUserInfo)(nil), "airdropsvc.ChannelUserInfo")
	proto.RegisterType((*GetChannelUserResponse)(nil), "airdropsvc.GetChannelUserResponse")
	proto.RegisterType((*GetTwitterAuthUrlRequest)(nil), "airdropsvc.GetTwitterAuthUrlRequest")
	proto.RegisterType((*GetTwitterAuthUrlResponse)(nil), "airdropsvc.GetTwitterAuthUrlResponse")
	proto.RegisterType((*UserTwitterAuth)(nil), "airdropsvc.UserTwitterAuth")
	proto.RegisterType((*Airdrop)(nil), "airdropsvc.Airdrop")
	proto.RegisterType((*GetAirdropInfoRequest)(nil), "airdropsvc.GetAirdropInfoRequest")
	proto.RegisterType((*GetAirdropInfoResponse)(nil), "airdropsvc.GetAirdropInfoResponse")
	proto.RegisterType((*TwitterCallbackRequest)(nil), "airdropsvc.TwitterCallbackRequest")
	proto.RegisterType((*TwitterCallbackResponse)(nil), "airdropsvc.TwitterCallbackResponse")
}

func init() { proto.RegisterFile("airdropsvc.proto", fileDescriptor_c89afda3b68868bf) }

var fileDescriptor_c89afda3b68868bf = []byte{
	// 2071 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x58, 0x4f, 0x6f, 0xdb, 0xc8,
	0x15, 0x0f, 0x15, 0xc9, 0xb6, 0x9e, 0xac, 0x3f, 0x1e, 0xff, 0x63, 0x94, 0xae, 0xe3, 0x30, 0x49,
	0xed, 0x45, 0x1a, 0x13, 0x9b, 0x6d, 0x80, 0x1e, 0x0a, 0xb4, 0x5e, 0xa3, 0xbb, 0x30, 0x90, 0x2d,
	0xb6, 0x8c, 0xd3, 0x83, 0x2f, 0x04, 0x2d, 0x8e, 0xe4, 0xa9, 0x28, 0x52, 0xe1, 0x0c, 0xed, 0x64,
	0x81, 0x02, 0x6d, 0x0e, 0xbd, 0x14, 0x05, 0xda, 0x2d, 0xd0, 0x6b, 0xbf, 0x43, 0xbf, 0x42, 0x2f,
	0xbd, 0x14, 0x58, 0xa0, 0x97, 0x1e, 0x8b, 0xa4, 0x97, 0x5e, 0x7b, 0xe8, 0xb9, 0x98, 0x37, 0x43,
	0x8a, 0xa4, 0x28, 0x79, 0xf7, 0xc6, 0xf7, 0x9b, 0x37, 0xef, 0xbd, 0x79, 0xf3, 0xe6, 0x37, 0x6f,
	0x08, 0x3d, 0x8f, 0xc5, 0x7e, 0x1c, 0x4d, 0xf9, 0xd5, 0xe0, 0x68, 0x1a, 0x47, 0x22, 0x22, 0x30,
	0x43, 0xfa, 0x3f, 0x19, 0x31, 0x71, 0x99, 0x5c, 0x1c, 0x0d, 0xa2, 0x89, 0x3d, 0xa1, 0xc2, 0xbb,
	0xa2, 0x31, 0xa7, 0xb6, 0x88, 0x13, 0xce, 0x6d, 0x9f, 0x0e, 0x45, 0x4c, 0xa9, 0x3d, 0x8a, 0xa2,
	0x51, 0x40, 0xc5, 0x25, 0x8b, 0xfd, 0xa9, 0x17, 0x8b, 0x37, 0xb6, 0x17, 0x86, 0x91, 0xf0, 0x04,
	0x8b, 0x42, 0xae, 0x4c, 0x5a, 0x6d, 0x68, 0x9d, 0x51, 0x2e, 0x1c, 0xfa, 0x2a, 0xa1, 0x5c, 0x58,
	0x1d, 0x58, 0x57, 0x22, 0x9f, 0x46, 0x21, 0xa7, 0xd6, 0x9f, 0x0c, 0x68, 0xbe, 0xe4, 0x34, 0x3e,
	0x1e, 0xd1, 0x50, 0x90, 0x0e, 0xd4, 0x12, 0xcf, 0x34, 0xf6, 0x8d, 0xc3, 0xa6, 0x53, 0x4b, 0x3c,
	0xb2, 0x03, 0x2b, 0x6c, 0xea, 0xf9, 0x7e, 0x6c, 0xd6, 0x10, 0xd3, 0x12, 0x31, 0x61, 0xf5, 0x22,
	0x8e, 0xae, 0x39, 0x8d, 0xcd, 0xdb, 0x38, 0x90, 0x8a, 0xa4, 0x0f, 0x6b, 0xd3, 0xc0, 0x13, 0xc3,
	0x28, 0x9e, 0x98, 0x75, 0x1c, 0xca, 0x64, 0x69, 0x3d, 0xe2, 0x66, 0x43, 0x59, 0x8f, 0x38, 0xb9,
	0x0b, 0x4d, 0x9f, 0x5e, 0xb1, 0x01, 0x75, 0x99, 0x6f, 0xae, 0x28, 0x65, 0x05, 0x9c, 0xfa, 0x56,
	0x0c, 0x80, 0x71, 0x5d, 0x79, 0xc2, 0x8b, 0xc9, 0x16, 0x34, 0xf8, 0xc4, 0x0b, 0x02, 0x1d, 0x9b,
	0x12, 0x64, 0x78, 0x13, 0xea, 0xb3, 0x64, 0x92, 0x86, 0xa7, 0x24, 0xa9, 0x1d, 0x78, 0xf1, 0x88,
	0xea, 0xe0, 0x94, 0x40, 0xf6, 0x61, 0x3d, 0x1c, 0x0a, 0xd7, 0xe3, 0x9c, 0x0a, 0xe9, 0x51, 0x85,
	0x07, 0xe1, 0x50, 0x1c, 0x4b, 0xe8, 0xd4, 0xb7, 0xfe, 0x57, 0x87, 0x35, 0xe9, 0xf4, 0x34, 0x1c,
	0x46, 0xa4, 0x07, 0xb7, 0x13, 0xe6, 0xa3, 0xc3, 0xba, 0x23, 0x3f, 0xe5, 0xda, 0x12, 0x4e, 0xe3,
	0xd0, 0x9b, 0x50, 0xed, 0x30, 0x93, 0x65, 0x46, 0x26, 0x8c, 0x53, 0xce, 0xfc, 0x34, 0x23, 0x5a,
	0x94, 0x41, 0x8e, 0x68, 0xe8, 0xd3, 0x58, 0x3b, 0xd4, 0x12, 0x06, 0x1f, 0x5d, 0xb0, 0x80, 0xea,
	0x8c, 0x68, 0x49, 0x06, 0x4f, 0x27, 0x1e, 0x0b, 0x74, 0x46, 0x94, 0x20, 0xed, 0xcb, 0xcc, 0x53,
	0xce, 0xcd, 0x55, 0x65, 0x5f, 0x8b, 0xd2, 0x8e, 0x87, 0x49, 0x32, 0xd7, 0x94, 0x1d, 0x25, 0x91,
	0x7b, 0xd0, 0x62, 0xdc, 0x1d, 0x46, 0x41, 0x10, 0x5d, 0x53, 0xdf, 0x6c, 0xee, 0x1b, 0x87, 0x6b,
	0x0e, 0x30, 0xfe, 0xa9, 0x46, 0xc8, 0x07, 0x00, 0x8c, 0xbb, 0x17, 0x41, 0x34, 0x18, 0x53, 0xdf,
	0x04, 0x1c, 0x6f, 0x32, 0xfe, 0x89, 0x02, 0xc8, 0x87, 0xd0, 0x53, 0x93, 0x59, 0x38, 0xe2, 0xee,
	0x20, 0x4a, 0x42, 0x61, 0xb6, 0xf6, 0x8d, 0xc3, 0xb6, 0xd3, 0x9d, 0xe1, 0x27, 0x12, 0x96, 0x96,
	0x86, 0x5e, 0x98, 0x2a, 0xad, 0xa3, 0x52, 0x53, 0x22, 0x6a, 0xf8, 0x1e, 0xb4, 0x02, 0x36, 0xa6,
	0xbe, 0x1e, 0x6f, 0xe3, 0x38, 0x20, 0xa4, 0x14, 0x1e, 0x42, 0x27, 0xa4, 0xd7, 0x6e, 0xce, 0x46,
	0x07, 0x75, 0xd6, 0x43, 0x7a, 0xfd, 0x69, 0x66, 0xe6, 0x19, 0x80, 0x5a, 0x9a, 0x9b, 0xc4, 0x81,
	0xd9, 0xdd, 0x37, 0x0e, 0x5b, 0x4f, 0x77, 0x8e, 0x72, 0x67, 0x68, 0x56, 0x2f, 0x4e, 0x53, 0x69,
	0xbe, 0x8c, 0x03, 0xf2, 0x00, 0xda, 0x8c, 0xbb, 0x5a, 0x6d, 0x4a, 0x7d, 0xb3, 0x87, 0x2b, 0x5d,
	0x67, 0xfc, 0x38, 0xc3, 0xc8, 0x23, 0xe8, 0x68, 0x0d, 0x97, 0x0b, 0x4f, 0x24, 0xdc, 0xdc, 0x40,
	0xad, 0xb6, 0x46, 0x5f, 0x20, 0xa8, 0x53, 0x16, 0x44, 0x23, 0x16, 0x52, 0xdf, 0x24, 0x69, 0xca,
	0x9e, 0x2b, 0x80, 0xdc, 0x87, 0xf5, 0x4b, 0x1a, 0x4c, 0xdd, 0xb4, 0x12, 0x36, 0x71, 0x43, 0x5a,
	0x12, 0xfb, 0x5c, 0x57, 0xc3, 0x16, 0x34, 0x58, 0x28, 0xe2, 0xc8, 0xdc, 0x52, 0xbb, 0x8b, 0x82,
	0xf5, 0x05, 0x34, 0xbf, 0xf0, 0x46, 0xf4, 0x67, 0x09, 0x1b, 0x8c, 0xb1, 0x7a, 0xd9, 0x84, 0x09,
	0x5d, 0x7a, 0x4a, 0x20, 0xbb, 0xb0, 0x1a, 0xd2, 0xd7, 0x58, 0xb8, 0xba, 0xd8, 0xa5, 0x78, 0x8a,
	0x16, 0x45, 0x24, 0xbc, 0x00, 0xeb, 0xae, 0xee, 0x28, 0xc1, 0x7a, 0x6b, 0x40, 0x5d, 0x9a, 0x94,
	0xcb, 0x47, 0xc4, 0x8d, 0xe9, 0x20, 0x8a, 0x7d, 0xae, 0xad, 0xae, 0x23, 0xe8, 0x28, 0x4c, 0x9e,
	0xc4, 0xa9, 0x37, 0xa2, 0x2e, 0x67, 0x5f, 0xaa, 0xd2, 0xae, 0x3b, 0x6b, 0x12, 0x78, 0xc1, 0xbe,
	0xa4, 0xe4, 0x0e, 0xe0, 0xb7, 0x1b, 0x26, 0x13, 0xed, 0x63, 0x55, 0xca, 0x3f, 0x4d, 0x26, 0x32,
	0x1f, 0xca, 0xb8, 0x04, 0xb0, 0xbe, 0xeb, 0x4e, 0x13, 0x11, 0xe9, 0xdb, 0xfa, 0x08, 0xb6, 0x75,
	0x8e, 0xcf, 0xae, 0x99, 0x10, 0x34, 0xd6, 0x2c, 0x94, 0x3f, 0x2d, 0x46, 0xe1, 0xb4, 0x58, 0x26,
	0xec, 0x94, 0xa7, 0x68, 0xa6, 0xda, 0xcd, 0x8c, 0x9d, 0x5c, 0x7a, 0x61, 0x48, 0x83, 0x94, 0xd2,
	0x66, 0x53, 0xb2, 0x01, 0x3d, 0x65, 0x07, 0xb6, 0xb4, 0x15, 0x55, 0xf4, 0xe9, 0x8c, 0xc7, 0xb0,
	0x5d, 0xc2, 0xd5, 0x04, 0x42, 0xa0, 0x3e, 0x88, 0x7c, 0xaa, 0x73, 0x84, 0xdf, 0x16, 0x81, 0xde,
	0x0b, 0x1a, 0xfa, 0x67, 0xd7, 0x94, 0x66, 0x2c, 0x7a, 0x00, 0x1b, 0x39, 0x6c, 0xf9, 0xe4, 0xe7,
	0x6c, 0x4c, 0xcb, 0x93, 0x73, 0xd8, 0x92, 0xc9, 0x9b, 0xb0, 0xe1, 0xd0, 0x69, 0xf0, 0xa6, 0x30,
	0xfb, 0x10, 0x48, 0x1e, 0x5c, 0x32, 0xfd, 0x0e, 0xec, 0x9e, 0x5c, 0xd2, 0xc1, 0x58, 0x2f, 0x55,
	0x9e, 0x8e, 0xd4, 0xc8, 0x11, 0x98, 0xf3, 0x43, 0x4b, 0x4c, 0xed, 0xc0, 0xd6, 0xf3, 0x28, 0x1a,
	0x27, 0xa5, 0x7d, 0x94, 0x89, 0x2c, 0xe1, 0x4b, 0x8c, 0x9c, 0x03, 0xd1, 0x1b, 0x24, 0xf9, 0xf5,
	0xc6, 0x52, 0x90, 0x36, 0xc4, 0x9b, 0x69, 0x4a, 0xb5, 0xf8, 0x9d, 0x63, 0xfc, 0xdb, 0x79, 0xc6,
	0xb7, 0xfe, 0x6b, 0xc0, 0x66, 0xc1, 0xf8, 0xe2, 0x38, 0x90, 0xd8, 0xe3, 0x40, 0x9b, 0x95, 0x9f,
	0xe4, 0x7b, 0x40, 0x54, 0x19, 0x0f, 0x94, 0x09, 0x37, 0x49, 0x6f, 0xb6, 0xba, 0xd3, 0xc3, 0x11,
	0x6d, 0x5b, 0x26, 0x2a, 0xcf, 0x15, 0xde, 0x04, 0xd9, 0x4a, 0x16, 0x7e, 0x2d, 0xe3, 0x8a, 0xe3,
	0x49, 0x4a, 0x8a, 0x2a, 0x38, 0xa4, 0x2b, 0xc5, 0xf1, 0x4d, 0x85, 0x48, 0x5a, 0xba, 0x03, 0x6b,
	0x2c, 0xe2, 0x6e, 0xc0, 0xc2, 0xb1, 0x66, 0xfa, 0x55, 0x16, 0xf1, 0xe7, 0x2c, 0x1c, 0x93, 0xef,
	0x42, 0x57, 0x0e, 0xe9, 0xd9, 0xa8, 0xa1, 0x38, 0xbf, 0xcd, 0x22, 0xfe, 0x39, 0xa2, 0x52, 0x4f,
	0x1e, 0xaf, 0xcf, 0xa8, 0xc8, 0x85, 0x76, 0xf3, 0xf1, 0xfa, 0xb3, 0x01, 0xbb, 0xf2, 0x68, 0x16,
	0x26, 0x2d, 0xc9, 0xd5, 0x8f, 0xa1, 0x9d, 0xcf, 0x09, 0x37, 0x6b, 0xfb, 0xb7, 0x0f, 0x5b, 0x4f,
	0xef, 0xe6, 0x69, 0x37, 0x67, 0x0b, 0x73, 0xbf, 0x3e, 0x98, 0x01, 0x9c, 0x1c, 0x21, 0xb5, 0xb0,
	0xd0, 0x13, 0x91, 0x4a, 0x69, 0xeb, 0x69, 0x2f, 0x3f, 0x5b, 0x46, 0xe3, 0xcc, 0x54, 0xac, 0x0b,
	0xd8, 0x99, 0x0b, 0xf0, 0xa6, 0x4a, 0x29, 0xf8, 0xa8, 0xdd, 0xec, 0xe3, 0x3f, 0x35, 0xe8, 0x96,
	0xa2, 0x96, 0xcd, 0x49, 0x66, 0xb8, 0xc6, 0xf0, 0x76, 0x4c, 0x57, 0x9e, 0x51, 0x6e, 0x53, 0x23,
	0xa7, 0xbe, 0xbc, 0xd3, 0xae, 0xbc, 0x80, 0xf9, 0x78, 0x5d, 0xa8, 0x46, 0xa3, 0xe1, 0x00, 0x42,
	0xf2, 0xae, 0xc0, 0x4a, 0xcd, 0x55, 0x47, 0xdd, 0xd1, 0x12, 0xd9, 0x84, 0x86, 0x78, 0x2d, 0x4d,
	0x36, 0x74, 0x59, 0xbf, 0x3e, 0xf5, 0xc9, 0x21, 0xd4, 0xb1, 0xe4, 0x56, 0x30, 0xf6, 0xad, 0xf2,
	0xa5, 0x86, 0x69, 0x45, 0x0d, 0x49, 0xe7, 0xf9, 0x8b, 0x8a, 0x62, 0x65, 0x34, 0x9c, 0xf5, 0xdc,
	0x3d, 0x45, 0xe5, 0x3d, 0x94, 0x2a, 0x09, 0x36, 0xa1, 0xd8, 0x18, 0xd4, 0x9d, 0x96, 0xc6, 0xce,
	0xd8, 0x84, 0xe2, 0xf2, 0x62, 0xea, 0x09, 0xea, 0xbb, 0x9e, 0xc0, 0xe6, 0xa0, 0xee, 0x34, 0x35,
	0x72, 0x8c, 0x57, 0x76, 0xb6, 0xef, 0x4c, 0x35, 0x07, 0x75, 0x27, 0x4d, 0xc8, 0x4b, 0xe6, 0x93,
	0x03, 0xe8, 0xa6, 0x0a, 0xe9, 0xa6, 0xb4, 0x70, 0x41, 0x1d, 0x0d, 0xeb, 0x0b, 0xcf, 0xfa, 0x05,
	0xec, 0x94, 0x8b, 0x74, 0x49, 0xbd, 0xfd, 0x50, 0xf9, 0x4d, 0x8f, 0xa0, 0xda, 0xcb, 0xa5, 0xd5,
	0x06, 0x4a, 0x5f, 0xca, 0xd6, 0x2b, 0x30, 0x3f, 0xa3, 0x42, 0x73, 0xd1, 0x71, 0x22, 0x2e, 0x5f,
	0xc6, 0xe9, 0x2d, 0x81, 0x2b, 0x4a, 0xe2, 0x98, 0x86, 0xc2, 0x9d, 0xb5, 0x75, 0xa0, 0x21, 0xb9,
	0xa2, 0xef, 0x03, 0x48, 0x9f, 0xae, 0x27, 0x3b, 0x61, 0xed, 0x79, 0x7b, 0xae, 0xbd, 0x90, 0x83,
	0x4e, 0x33, 0x49, 0x3f, 0xad, 0x63, 0xb8, 0x53, 0xe1, 0xf2, 0xdb, 0xb0, 0x8f, 0xf5, 0x97, 0x1a,
	0x74, 0xa5, 0xed, 0x9c, 0x11, 0x49, 0x01, 0x42, 0x89, 0x98, 0x08, 0x37, 0x2b, 0xcd, 0xb6, 0x98,
	0x51, 0xf6, 0x29, 0x72, 0x64, 0xae, 0x1d, 0xc5, 0xef, 0x42, 0x9b, 0x7a, 0xbb, 0xd4, 0xa6, 0x1e,
	0x80, 0x6e, 0xde, 0x68, 0x9c, 0xb6, 0x5a, 0xaa, 0x3c, 0x3b, 0x19, 0x9c, 0xf5, 0x6c, 0x42, 0xde,
	0x30, 0x5a, 0xa9, 0xa1, 0xd2, 0x85, 0x90, 0x52, 0x90, 0x9c, 0xa9, 0x23, 0xcc, 0x15, 0xd2, 0x8a,
	0xe6, 0x4c, 0x35, 0x72, 0x92, 0xd5, 0xd3, 0xec, 0x34, 0xac, 0x22, 0x57, 0xa6, 0xa7, 0xa1, 0x58,
	0x86, 0x6b, 0xe5, 0x32, 0xcc, 0x1d, 0xf9, 0x66, 0x91, 0xc8, 0x5e, 0xc1, 0xaa, 0xbe, 0xf4, 0x55,
	0x96, 0x59, 0x88, 0x09, 0xaa, 0x39, 0xf8, 0x5d, 0xb2, 0x5b, 0x2b, 0xdb, 0xbd, 0x0b, 0xcd, 0x21,
	0x0b, 0x19, 0xbf, 0x94, 0xa3, 0x8a, 0xe7, 0xd7, 0x14, 0xa0, 0x62, 0xd5, 0x3d, 0xa0, 0x6e, 0xd8,
	0x95, 0x64, 0xfd, 0x00, 0xe9, 0x56, 0x7b, 0xcd, 0x5f, 0x61, 0x37, 0x95, 0x96, 0xf5, 0x95, 0x81,
	0x87, 0xa0, 0x30, 0x75, 0x49, 0x89, 0x3c, 0x83, 0x55, 0x9d, 0xc0, 0xaa, 0x03, 0x50, 0x2a, 0x15,
	0x27, 0xd5, 0x25, 0x4f, 0x60, 0x55, 0xab, 0x69, 0x9e, 0xdd, 0xcc, 0x4f, 0xd3, 0xce, 0x9d, 0x54,
	0xc7, 0xfa, 0xbb, 0x01, 0x3b, 0xda, 0xce, 0x89, 0x17, 0x04, 0x17, 0xde, 0x60, 0xfc, 0x8d, 0xcf,
	0xca, 0x3d, 0x68, 0x45, 0x5e, 0x22, 0x2e, 0x5d, 0x11, 0x8d, 0x69, 0xa8, 0xab, 0x0f, 0x10, 0x3a,
	0x93, 0x88, 0xbc, 0x23, 0x95, 0xc2, 0x15, 0x8d, 0xd9, 0x90, 0x65, 0xef, 0xc4, 0x36, 0xa2, 0x3f,
	0xd7, 0x60, 0xe9, 0xcc, 0xd5, 0xbf, 0xd9, 0x99, 0xc3, 0xc7, 0x20, 0x72, 0x5f, 0x43, 0x3f, 0x06,
	0xa5, 0x60, 0xfd, 0x08, 0x76, 0xe7, 0x96, 0xf3, 0x6d, 0xce, 0xe1, 0xd3, 0xbf, 0x76, 0x01, 0x8e,
	0x33, 0xd7, 0xc4, 0x81, 0xba, 0x7c, 0x29, 0x93, 0xdd, 0x7c, 0x3c, 0xb9, 0xa7, 0x74, 0xdf, 0x9c,
	0x1f, 0x48, 0x5b, 0xd5, 0xb7, 0xff, 0xf8, 0xf7, 0x1f, 0x6b, 0x1b, 0xa4, 0x61, 0x0b, 0xca, 0xc5,
	0xf9, 0x1a, 0x59, 0xc1, 0x0f, 0x9b, 0xfc, 0xc1, 0x80, 0x8d, 0x39, 0xba, 0x20, 0x0f, 0xf3, 0x86,
	0x16, 0x11, 0x58, 0xff, 0xd1, 0x0d, 0x5a, 0xda, 0xb7, 0x8d, 0xbe, 0x3f, 0x24, 0x1b, 0xb6, 0xae,
	0x0b, 0x1b, 0xf7, 0x21, 0x89, 0x83, 0xf3, 0x2d, 0x42, 0xe6, 0x40, 0x9b, 0xfc, 0xca, 0x80, 0x4e,
	0xb1, 0x38, 0xc9, 0xfd, 0x92, 0xab, 0xf9, 0x9a, 0xef, 0x5b, 0xcb, 0x54, 0x74, 0x28, 0x07, 0x18,
	0xca, 0x7d, 0xd2, 0xb6, 0xb5, 0xae, 0xcd, 0xc2, 0x61, 0x74, 0xde, 0x23, 0x9d, 0x02, 0x60, 0x93,
	0xdf, 0x1a, 0xd0, 0x2d, 0xed, 0x1d, 0x29, 0x38, 0xa8, 0xae, 0xd3, 0xfe, 0x83, 0xa5, 0x3a, 0x0b,
	0x13, 0x32, 0xd0, 0x2a, 0x85, 0x84, 0xa4, 0xa0, 0x4d, 0x7e, 0x6d, 0x40, 0xbb, 0xf0, 0x3c, 0x20,
	0xfb, 0x15, 0x7e, 0x0a, 0x2f, 0x8a, 0xfe, 0xfd, 0x25, 0x1a, 0x3a, 0x8e, 0xc7, 0x18, 0xc7, 0x23,
	0xd2, 0xcd, 0x5c, 0x2a, 0xca, 0x3d, 0x27, 0xa4, 0x57, 0x82, 0x54, 0x0c, 0x85, 0xce, 0xba, 0x18,
	0x43, 0x55, 0x33, 0x5e, 0x8c, 0xa1, 0xb2, 0x2d, 0xaf, 0x88, 0x21, 0x40, 0xbd, 0x42, 0x0c, 0x0a,
	0xb2, 0xc9, 0x2f, 0xa1, 0x99, 0x3d, 0x72, 0xc8, 0x77, 0xf2, 0xc6, 0xcb, 0xef, 0xa1, 0xfe, 0x07,
	0x0b, 0x46, 0xb5, 0xdb, 0x8f, 0xd1, 0xed, 0x13, 0xb2, 0x99, 0xf9, 0xe0, 0x34, 0xf4, 0x5d, 0xbc,
	0x4d, 0xce, 0x77, 0xc8, 0x56, 0x05, 0x8c, 0xee, 0xb3, 0x67, 0x52, 0xd1, 0x7d, 0xf9, 0x45, 0x55,
	0x74, 0x3f, 0xf7, 0xb6, 0xaa, 0x70, 0x1f, 0xb0, 0x31, 0xad, 0x70, 0x3f, 0x83, 0x6d, 0xf2, 0xd6,
	0x00, 0x98, 0x3d, 0xb4, 0x48, 0xc1, 0xc5, 0xdc, 0xab, 0xac, 0xbf, 0xb7, 0x68, 0x58, 0x87, 0xf0,
	0x0c, 0x43, 0xb0, 0x73, 0xbe, 0x62, 0xa9, 0xa4, 0x63, 0xd8, 0x25, 0xdb, 0x55, 0xb8, 0x4d, 0xbe,
	0x32, 0xa0, 0x57, 0x7e, 0xa8, 0x91, 0x07, 0xc5, 0x76, 0xa8, 0xf2, 0x85, 0xd7, 0x7f, 0xb8, 0x5c,
	0x69, 0x61, 0x66, 0x06, 0x52, 0x15, 0x7b, 0x8e, 0x42, 0x66, 0x66, 0xb0, 0x4d, 0xae, 0xa1, 0x95,
	0x7b, 0x6a, 0x91, 0xbd, 0x8a, 0xee, 0x2c, 0xcf, 0x14, 0xf7, 0x16, 0x8e, 0xcf, 0xd1, 0x84, 0x6e,
	0x1d, 0x67, 0x34, 0x91, 0x07, 0x6c, 0xf2, 0x3b, 0x03, 0xba, 0xa5, 0xb7, 0x41, 0x91, 0x26, 0xaa,
	0x1f, 0x0e, 0x45, 0x9a, 0x58, 0xf0, 0xfa, 0xb1, 0x3e, 0xc2, 0x28, 0x1e, 0x13, 0x62, 0xe7, 0x1f,
	0x3c, 0xf6, 0xd4, 0x1b, 0xd1, 0xf3, 0x6d, 0xb2, 0x39, 0x8f, 0x66, 0xcc, 0x99, 0x0f, 0xa7, 0xcc,
	0x9c, 0x15, 0xd1, 0x58, 0xcb, 0x54, 0x16, 0xa5, 0x44, 0xed, 0x48, 0x2e, 0x25, 0x7a, 0x2f, 0x7e,
	0x63, 0x40, 0xa7, 0xf8, 0xbf, 0xa4, 0x18, 0x42, 0xe5, 0xef, 0x97, 0x62, 0x08, 0x0b, 0x7e, 0xb7,
	0x3c, 0xc1, 0x10, 0x0e, 0x48, 0x2f, 0xe3, 0x6a, 0x5d, 0x0b, 0xe7, 0x9b, 0x64, 0xa3, 0x8c, 0x15,
	0x02, 0xd1, 0x0b, 0xaa, 0x0c, 0xa4, 0xf8, 0xeb, 0xa6, 0x32, 0x90, 0xf2, 0x4f, 0x9c, 0xf9, 0x40,
	0x74, 0x0a, 0x0a, 0x81, 0xa4, 0x95, 0xf2, 0x89, 0xf9, 0xb7, 0x77, 0x7b, 0xc6, 0xd7, 0xef, 0xf6,
	0x8c, 0x7f, 0xbd, 0xdb, 0x33, 0x7e, 0xff, 0x7e, 0xef, 0xd6, 0xd7, 0xef, 0xf7, 0x6e, 0xfd, 0xf3,
	0xfd, 0xde, 0xad, 0x8b, 0x15, 0xfc, 0x21, 0xfe, 0xf1, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x4e,
	0xa2, 0x29, 0x39, 0x77, 0x17, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AirdropsvcClient is the client API for Airdropsvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AirdropsvcClient interface {
	Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
	GetTwitterAuthUrl(ctx context.Context, in *GetTwitterAuthUrlRequest, opts ...grpc.CallOption) (*GetTwitterAuthUrlResponse, error)
	GetAirdropInfo(ctx context.Context, in *GetAirdropInfoRequest, opts ...grpc.CallOption) (*GetAirdropInfoResponse, error)
	TwitterCallback(ctx context.Context, in *TwitterCallbackRequest, opts ...grpc.CallOption) (*TwitterCallbackResponse, error)
	TwitterFollow(ctx context.Context, in *TwitterFollowRequest, opts ...grpc.CallOption) (*TwitterFollowResponse, error)
	LookupTwitter(ctx context.Context, in *LookupTwitterRequest, opts ...grpc.CallOption) (*LookupTwitterResponse, error)
	SendTweet(ctx context.Context, in *SendTweetRequest, opts ...grpc.CallOption) (*SendTweetResponse, error)
	LikeTweet(ctx context.Context, in *LikeTweetRequest, opts ...grpc.CallOption) (*LikeTweetResponse, error)
	ReplyTweet(ctx context.Context, in *ReplyTweetRequest, opts ...grpc.CallOption) (*ReplyTweetResponse, error)
	CheckTwitterUser(ctx context.Context, in *CheckTwitterUserRequest, opts ...grpc.CallOption) (*CheckTwitterUserResponse, error)
	ChannelInfo(ctx context.Context, in *ChannelInfoRequest, opts ...grpc.CallOption) (*ChannelInfoResponse, error)
	PageChannelUser(ctx context.Context, in *PageChannelUserRequest, opts ...grpc.CallOption) (*PageChannelUserResponse, error)
	GetChannelUser(ctx context.Context, in *GetChannelUserRequest, opts ...grpc.CallOption) (*GetChannelUserResponse, error)
	AirdropTwitter(ctx context.Context, in *AirdropTwitterRequest, opts ...grpc.CallOption) (*AirdropTwitterResponse, error)
	AirdropChannel(ctx context.Context, in *AirdropChannelRequest, opts ...grpc.CallOption) (*AirdropChannelResponse, error)
}

type airdropsvcClient struct {
	cc *grpc.ClientConn
}

func NewAirdropsvcClient(cc *grpc.ClientConn) AirdropsvcClient {
	return &airdropsvcClient{cc}
}

func (c *airdropsvcClient) Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, "/airdropsvc.Airdropsvc/Test", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airdropsvcClient) GetTwitterAuthUrl(ctx context.Context, in *GetTwitterAuthUrlRequest, opts ...grpc.CallOption) (*GetTwitterAuthUrlResponse, error) {
	out := new(GetTwitterAuthUrlResponse)
	err := c.cc.Invoke(ctx, "/airdropsvc.Airdropsvc/GetTwitterAuthUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airdropsvcClient) GetAirdropInfo(ctx context.Context, in *GetAirdropInfoRequest, opts ...grpc.CallOption) (*GetAirdropInfoResponse, error) {
	out := new(GetAirdropInfoResponse)
	err := c.cc.Invoke(ctx, "/airdropsvc.Airdropsvc/GetAirdropInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airdropsvcClient) TwitterCallback(ctx context.Context, in *TwitterCallbackRequest, opts ...grpc.CallOption) (*TwitterCallbackResponse, error) {
	out := new(TwitterCallbackResponse)
	err := c.cc.Invoke(ctx, "/airdropsvc.Airdropsvc/TwitterCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airdropsvcClient) TwitterFollow(ctx context.Context, in *TwitterFollowRequest, opts ...grpc.CallOption) (*TwitterFollowResponse, error) {
	out := new(TwitterFollowResponse)
	err := c.cc.Invoke(ctx, "/airdropsvc.Airdropsvc/TwitterFollow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airdropsvcClient) LookupTwitter(ctx context.Context, in *LookupTwitterRequest, opts ...grpc.CallOption) (*LookupTwitterResponse, error) {
	out := new(LookupTwitterResponse)
	err := c.cc.Invoke(ctx, "/airdropsvc.Airdropsvc/LookupTwitter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airdropsvcClient) SendTweet(ctx context.Context, in *SendTweetRequest, opts ...grpc.CallOption) (*SendTweetResponse, error) {
	out := new(SendTweetResponse)
	err := c.cc.Invoke(ctx, "/airdropsvc.Airdropsvc/SendTweet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airdropsvcClient) LikeTweet(ctx context.Context, in *LikeTweetRequest, opts ...grpc.CallOption) (*LikeTweetResponse, error) {
	out := new(LikeTweetResponse)
	err := c.cc.Invoke(ctx, "/airdropsvc.Airdropsvc/LikeTweet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airdropsvcClient) ReplyTweet(ctx context.Context, in *ReplyTweetRequest, opts ...grpc.CallOption) (*ReplyTweetResponse, error) {
	out := new(ReplyTweetResponse)
	err := c.cc.Invoke(ctx, "/airdropsvc.Airdropsvc/ReplyTweet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airdropsvcClient) CheckTwitterUser(ctx context.Context, in *CheckTwitterUserRequest, opts ...grpc.CallOption) (*CheckTwitterUserResponse, error) {
	out := new(CheckTwitterUserResponse)
	err := c.cc.Invoke(ctx, "/airdropsvc.Airdropsvc/CheckTwitterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airdropsvcClient) ChannelInfo(ctx context.Context, in *ChannelInfoRequest, opts ...grpc.CallOption) (*ChannelInfoResponse, error) {
	out := new(ChannelInfoResponse)
	err := c.cc.Invoke(ctx, "/airdropsvc.Airdropsvc/ChannelInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airdropsvcClient) PageChannelUser(ctx context.Context, in *PageChannelUserRequest, opts ...grpc.CallOption) (*PageChannelUserResponse, error) {
	out := new(PageChannelUserResponse)
	err := c.cc.Invoke(ctx, "/airdropsvc.Airdropsvc/PageChannelUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airdropsvcClient) GetChannelUser(ctx context.Context, in *GetChannelUserRequest, opts ...grpc.CallOption) (*GetChannelUserResponse, error) {
	out := new(GetChannelUserResponse)
	err := c.cc.Invoke(ctx, "/airdropsvc.Airdropsvc/GetChannelUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airdropsvcClient) AirdropTwitter(ctx context.Context, in *AirdropTwitterRequest, opts ...grpc.CallOption) (*AirdropTwitterResponse, error) {
	out := new(AirdropTwitterResponse)
	err := c.cc.Invoke(ctx, "/airdropsvc.Airdropsvc/AirdropTwitter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *airdropsvcClient) AirdropChannel(ctx context.Context, in *AirdropChannelRequest, opts ...grpc.CallOption) (*AirdropChannelResponse, error) {
	out := new(AirdropChannelResponse)
	err := c.cc.Invoke(ctx, "/airdropsvc.Airdropsvc/AirdropChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AirdropsvcServer is the server API for Airdropsvc service.
type AirdropsvcServer interface {
	Test(context.Context, *TestRequest) (*TestResponse, error)
	GetTwitterAuthUrl(context.Context, *GetTwitterAuthUrlRequest) (*GetTwitterAuthUrlResponse, error)
	GetAirdropInfo(context.Context, *GetAirdropInfoRequest) (*GetAirdropInfoResponse, error)
	TwitterCallback(context.Context, *TwitterCallbackRequest) (*TwitterCallbackResponse, error)
	TwitterFollow(context.Context, *TwitterFollowRequest) (*TwitterFollowResponse, error)
	LookupTwitter(context.Context, *LookupTwitterRequest) (*LookupTwitterResponse, error)
	SendTweet(context.Context, *SendTweetRequest) (*SendTweetResponse, error)
	LikeTweet(context.Context, *LikeTweetRequest) (*LikeTweetResponse, error)
	ReplyTweet(context.Context, *ReplyTweetRequest) (*ReplyTweetResponse, error)
	CheckTwitterUser(context.Context, *CheckTwitterUserRequest) (*CheckTwitterUserResponse, error)
	ChannelInfo(context.Context, *ChannelInfoRequest) (*ChannelInfoResponse, error)
	PageChannelUser(context.Context, *PageChannelUserRequest) (*PageChannelUserResponse, error)
	GetChannelUser(context.Context, *GetChannelUserRequest) (*GetChannelUserResponse, error)
	AirdropTwitter(context.Context, *AirdropTwitterRequest) (*AirdropTwitterResponse, error)
	AirdropChannel(context.Context, *AirdropChannelRequest) (*AirdropChannelResponse, error)
}

// UnimplementedAirdropsvcServer can be embedded to have forward compatible implementations.
type UnimplementedAirdropsvcServer struct {
}

func (*UnimplementedAirdropsvcServer) Test(ctx context.Context, req *TestRequest) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (*UnimplementedAirdropsvcServer) GetTwitterAuthUrl(ctx context.Context, req *GetTwitterAuthUrlRequest) (*GetTwitterAuthUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTwitterAuthUrl not implemented")
}
func (*UnimplementedAirdropsvcServer) GetAirdropInfo(ctx context.Context, req *GetAirdropInfoRequest) (*GetAirdropInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAirdropInfo not implemented")
}
func (*UnimplementedAirdropsvcServer) TwitterCallback(ctx context.Context, req *TwitterCallbackRequest) (*TwitterCallbackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TwitterCallback not implemented")
}
func (*UnimplementedAirdropsvcServer) TwitterFollow(ctx context.Context, req *TwitterFollowRequest) (*TwitterFollowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TwitterFollow not implemented")
}
func (*UnimplementedAirdropsvcServer) LookupTwitter(ctx context.Context, req *LookupTwitterRequest) (*LookupTwitterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LookupTwitter not implemented")
}
func (*UnimplementedAirdropsvcServer) SendTweet(ctx context.Context, req *SendTweetRequest) (*SendTweetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTweet not implemented")
}
func (*UnimplementedAirdropsvcServer) LikeTweet(ctx context.Context, req *LikeTweetRequest) (*LikeTweetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikeTweet not implemented")
}
func (*UnimplementedAirdropsvcServer) ReplyTweet(ctx context.Context, req *ReplyTweetRequest) (*ReplyTweetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplyTweet not implemented")
}
func (*UnimplementedAirdropsvcServer) CheckTwitterUser(ctx context.Context, req *CheckTwitterUserRequest) (*CheckTwitterUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckTwitterUser not implemented")
}
func (*UnimplementedAirdropsvcServer) ChannelInfo(ctx context.Context, req *ChannelInfoRequest) (*ChannelInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChannelInfo not implemented")
}
func (*UnimplementedAirdropsvcServer) PageChannelUser(ctx context.Context, req *PageChannelUserRequest) (*PageChannelUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PageChannelUser not implemented")
}
func (*UnimplementedAirdropsvcServer) GetChannelUser(ctx context.Context, req *GetChannelUserRequest) (*GetChannelUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelUser not implemented")
}
func (*UnimplementedAirdropsvcServer) AirdropTwitter(ctx context.Context, req *AirdropTwitterRequest) (*AirdropTwitterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AirdropTwitter not implemented")
}
func (*UnimplementedAirdropsvcServer) AirdropChannel(ctx context.Context, req *AirdropChannelRequest) (*AirdropChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AirdropChannel not implemented")
}

func RegisterAirdropsvcServer(s *grpc.Server, srv AirdropsvcServer) {
	s.RegisterService(&_Airdropsvc_serviceDesc, srv)
}

func _Airdropsvc_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirdropsvcServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airdropsvc.Airdropsvc/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirdropsvcServer).Test(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Airdropsvc_GetTwitterAuthUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTwitterAuthUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirdropsvcServer).GetTwitterAuthUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airdropsvc.Airdropsvc/GetTwitterAuthUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirdropsvcServer).GetTwitterAuthUrl(ctx, req.(*GetTwitterAuthUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Airdropsvc_GetAirdropInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAirdropInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirdropsvcServer).GetAirdropInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airdropsvc.Airdropsvc/GetAirdropInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirdropsvcServer).GetAirdropInfo(ctx, req.(*GetAirdropInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Airdropsvc_TwitterCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TwitterCallbackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirdropsvcServer).TwitterCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airdropsvc.Airdropsvc/TwitterCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirdropsvcServer).TwitterCallback(ctx, req.(*TwitterCallbackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Airdropsvc_TwitterFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TwitterFollowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirdropsvcServer).TwitterFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airdropsvc.Airdropsvc/TwitterFollow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirdropsvcServer).TwitterFollow(ctx, req.(*TwitterFollowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Airdropsvc_LookupTwitter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupTwitterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirdropsvcServer).LookupTwitter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airdropsvc.Airdropsvc/LookupTwitter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirdropsvcServer).LookupTwitter(ctx, req.(*LookupTwitterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Airdropsvc_SendTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTweetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirdropsvcServer).SendTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airdropsvc.Airdropsvc/SendTweet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirdropsvcServer).SendTweet(ctx, req.(*SendTweetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Airdropsvc_LikeTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikeTweetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirdropsvcServer).LikeTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airdropsvc.Airdropsvc/LikeTweet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirdropsvcServer).LikeTweet(ctx, req.(*LikeTweetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Airdropsvc_ReplyTweet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplyTweetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirdropsvcServer).ReplyTweet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airdropsvc.Airdropsvc/ReplyTweet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirdropsvcServer).ReplyTweet(ctx, req.(*ReplyTweetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Airdropsvc_CheckTwitterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTwitterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirdropsvcServer).CheckTwitterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airdropsvc.Airdropsvc/CheckTwitterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirdropsvcServer).CheckTwitterUser(ctx, req.(*CheckTwitterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Airdropsvc_ChannelInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirdropsvcServer).ChannelInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airdropsvc.Airdropsvc/ChannelInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirdropsvcServer).ChannelInfo(ctx, req.(*ChannelInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Airdropsvc_PageChannelUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageChannelUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirdropsvcServer).PageChannelUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airdropsvc.Airdropsvc/PageChannelUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirdropsvcServer).PageChannelUser(ctx, req.(*PageChannelUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Airdropsvc_GetChannelUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirdropsvcServer).GetChannelUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airdropsvc.Airdropsvc/GetChannelUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirdropsvcServer).GetChannelUser(ctx, req.(*GetChannelUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Airdropsvc_AirdropTwitter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AirdropTwitterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirdropsvcServer).AirdropTwitter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airdropsvc.Airdropsvc/AirdropTwitter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirdropsvcServer).AirdropTwitter(ctx, req.(*AirdropTwitterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Airdropsvc_AirdropChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AirdropChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AirdropsvcServer).AirdropChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airdropsvc.Airdropsvc/AirdropChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AirdropsvcServer).AirdropChannel(ctx, req.(*AirdropChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Airdropsvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "airdropsvc.Airdropsvc",
	HandlerType: (*AirdropsvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Test",
			Handler:    _Airdropsvc_Test_Handler,
		},
		{
			MethodName: "GetTwitterAuthUrl",
			Handler:    _Airdropsvc_GetTwitterAuthUrl_Handler,
		},
		{
			MethodName: "GetAirdropInfo",
			Handler:    _Airdropsvc_GetAirdropInfo_Handler,
		},
		{
			MethodName: "TwitterCallback",
			Handler:    _Airdropsvc_TwitterCallback_Handler,
		},
		{
			MethodName: "TwitterFollow",
			Handler:    _Airdropsvc_TwitterFollow_Handler,
		},
		{
			MethodName: "LookupTwitter",
			Handler:    _Airdropsvc_LookupTwitter_Handler,
		},
		{
			MethodName: "SendTweet",
			Handler:    _Airdropsvc_SendTweet_Handler,
		},
		{
			MethodName: "LikeTweet",
			Handler:    _Airdropsvc_LikeTweet_Handler,
		},
		{
			MethodName: "ReplyTweet",
			Handler:    _Airdropsvc_ReplyTweet_Handler,
		},
		{
			MethodName: "CheckTwitterUser",
			Handler:    _Airdropsvc_CheckTwitterUser_Handler,
		},
		{
			MethodName: "ChannelInfo",
			Handler:    _Airdropsvc_ChannelInfo_Handler,
		},
		{
			MethodName: "PageChannelUser",
			Handler:    _Airdropsvc_PageChannelUser_Handler,
		},
		{
			MethodName: "GetChannelUser",
			Handler:    _Airdropsvc_GetChannelUser_Handler,
		},
		{
			MethodName: "AirdropTwitter",
			Handler:    _Airdropsvc_AirdropTwitter_Handler,
		},
		{
			MethodName: "AirdropChannel",
			Handler:    _Airdropsvc_AirdropChannel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "airdropsvc.proto",
}

func (m *TestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *TestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TestResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UserAgent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserAgent) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Ua) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(len(m.Ua)))
		i += copy(dAtA[i:], m.Ua)
	}
	if len(m.Ipaddr) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(len(m.Ipaddr)))
		i += copy(dAtA[i:], m.Ipaddr)
	}
	if len(m.Browser) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(len(m.Browser)))
		i += copy(dAtA[i:], m.Browser)
	}
	if len(m.Platform) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(len(m.Platform)))
		i += copy(dAtA[i:], m.Platform)
	}
	if len(m.Os) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(len(m.Os)))
		i += copy(dAtA[i:], m.Os)
	}
	if len(m.DeviceId) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(len(m.DeviceId)))
		i += copy(dAtA[i:], m.DeviceId)
	}
	return i, nil
}

func (m *UserAvatar) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserAvatar) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Small) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(len(m.Small)))
		i += copy(dAtA[i:], m.Small)
	}
	if len(m.Medium) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(len(m.Medium)))
		i += copy(dAtA[i:], m.Medium)
	}
	if len(m.Large) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(len(m.Large)))
		i += copy(dAtA[i:], m.Large)
	}
	if len(m.NftAssetId) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(len(m.NftAssetId)))
		i += copy(dAtA[i:], m.NftAssetId)
	}
	return i, nil
}

func (m *UserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Uid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.Uid))
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if len(m.Misesid) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(len(m.Misesid)))
		i += copy(dAtA[i:], m.Misesid)
	}
	if len(m.Gender) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(len(m.Gender)))
		i += copy(dAtA[i:], m.Gender)
	}
	if len(m.Mobile) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(len(m.Mobile)))
		i += copy(dAtA[i:], m.Mobile)
	}
	if len(m.Email) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(len(m.Email)))
		i += copy(dAtA[i:], m.Email)
	}
	if len(m.Address) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(len(m.Address)))
		i += copy(dAtA[i:], m.Address)
	}
	if len(m.Avatar) > 0 {
		dAtA[i] = 0x42
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(len(m.Avatar)))
		i += copy(dAtA[i:], m.Avatar)
	}
	if m.IsFollowed {
		dAtA[i] = 0x48
		i++
		if m.IsFollowed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsBlocked {
		dAtA[i] = 0x50
		i++
		if m.IsBlocked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.FollowingsCount != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.FollowingsCount))
	}
	if m.FansCount != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.FansCount))
	}
	if m.LikedCount != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.LikedCount))
	}
	if m.NewFansCount != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.NewFansCount))
	}
	if m.AvatarUrl != nil {
		dAtA[i] = 0x7a
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.AvatarUrl.Size()))
		n1, err1 := m.AvatarUrl.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if m.IsAirdropped {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		if m.IsAirdropped {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.AirdropStatus {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		if m.AirdropStatus {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.IsLogined {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		if m.IsLogined {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.HelpMisesid) > 0 {
		dAtA[i] = 0x9a
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(len(m.HelpMisesid)))
		i += copy(dAtA[i:], m.HelpMisesid)
	}
	if len(m.Intro) > 0 {
		dAtA[i] = 0xa2
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(len(m.Intro)))
		i += copy(dAtA[i:], m.Intro)
	}
	return i, nil
}

func (m *PageQuick) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageQuick) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.Limit))
	}
	if len(m.NextId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(len(m.NextId)))
		i += copy(dAtA[i:], m.NextId)
	}
	if m.Total != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.Total))
	}
	return i, nil
}

func (m *Page) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Page) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TotalRecords != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.TotalRecords))
	}
	if m.PageSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.PageSize))
	}
	if m.PageNum != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.PageNum))
	}
	if m.TotalPage != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.TotalPage))
	}
	return i, nil
}

func (m *AirdropTwitterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AirdropTwitterRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Misesid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(len(m.Misesid)))
		i += copy(dAtA[i:], m.Misesid)
	}
	return i, nil
}

func (m *AirdropTwitterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AirdropTwitterResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *AirdropChannelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AirdropChannelRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *AirdropChannelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AirdropChannelResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *TwitterFollowRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TwitterFollowRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *TwitterFollowResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TwitterFollowResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *SendTweetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendTweetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *SendTweetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SendTweetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *LikeTweetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LikeTweetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *LikeTweetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LikeTweetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *ReplyTweetRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyTweetRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ReplyTweetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyTweetResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *CheckTwitterUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckTwitterUserRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *CheckTwitterUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CheckTwitterUserResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *LookupTwitterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupTwitterRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *LookupTwitterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LookupTwitterResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *ChannelInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Misesid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(len(m.Misesid)))
		i += copy(dAtA[i:], m.Misesid)
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.Medium) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(len(m.Medium)))
		i += copy(dAtA[i:], m.Medium)
	}
	return i, nil
}

func (m *ChannelInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.Code))
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if m.TotalChannelUser != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.TotalChannelUser))
	}
	if m.AirdropAmount != 0 {
		dAtA[i] = 0x25
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.AirdropAmount))))
		i += 4
	}
	if len(m.MediumUrl) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(len(m.MediumUrl)))
		i += copy(dAtA[i:], m.MediumUrl)
	}
	if len(m.IosLink) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(len(m.IosLink)))
		i += copy(dAtA[i:], m.IosLink)
	}
	if len(m.IosMediumLink) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(len(m.IosMediumLink)))
		i += copy(dAtA[i:], m.IosMediumLink)
	}
	return i, nil
}

func (m *GetChannelUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelUserRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Misesid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(len(m.Misesid)))
		i += copy(dAtA[i:], m.Misesid)
	}
	return i, nil
}

func (m *PageChannelUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageChannelUserResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.Code))
	}
	if len(m.ChannelUsers) > 0 {
		for _, msg := range m.ChannelUsers {
			dAtA[i] = 0x12
			i++
			i = encodeVarintAirdropsvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Paginator != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.Paginator.Size()))
		n2, err2 := m.Paginator.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	return i, nil
}

func (m *PageChannelUserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageChannelUserRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Misesid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(len(m.Misesid)))
		i += copy(dAtA[i:], m.Misesid)
	}
	if m.Paginator != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.Paginator.Size()))
		n3, err3 := m.Paginator.MarshalTo(dAtA[i:])
		if err3 != nil {
			return 0, err3
		}
		i += n3
	}
	return i, nil
}

func (m *ChannelUserInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelUserInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.ChannelId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(len(m.ChannelId)))
		i += copy(dAtA[i:], m.ChannelId)
	}
	if m.ValidState != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.ValidState))
	}
	if m.Amount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.Amount))
	}
	if len(m.TxId) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(len(m.TxId)))
		i += copy(dAtA[i:], m.TxId)
	}
	if m.User != nil {
		dAtA[i] = 0x32
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.User.Size()))
		n4, err4 := m.User.MarshalTo(dAtA[i:])
		if err4 != nil {
			return 0, err4
		}
		i += n4
	}
	if m.AirdropState != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.AirdropState))
	}
	if m.AirdropTime != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.AirdropTime))
	}
	if m.CreatedAt != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.CreatedAt))
	}
	if m.ChannelUid != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.ChannelUid))
	}
	if len(m.ChannelMisesid) > 0 {
		dAtA[i] = 0x5a
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(len(m.ChannelMisesid)))
		i += copy(dAtA[i:], m.ChannelMisesid)
	}
	return i, nil
}

func (m *GetChannelUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelUserResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.Code))
	}
	if m.ChanelUser != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.ChanelUser.Size()))
		n5, err5 := m.ChanelUser.MarshalTo(dAtA[i:])
		if err5 != nil {
			return 0, err5
		}
		i += n5
	}
	return i, nil
}

func (m *GetTwitterAuthUrlRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTwitterAuthUrlRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.CurrentUid))
	}
	if m.UserAgent != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.UserAgent.Size()))
		n6, err6 := m.UserAgent.MarshalTo(dAtA[i:])
		if err6 != nil {
			return 0, err6
		}
		i += n6
	}
	return i, nil
}

func (m *GetTwitterAuthUrlResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTwitterAuthUrlResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.Code))
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	return i, nil
}

func (m *UserTwitterAuth) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserTwitterAuth) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.TwitterUserId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(len(m.TwitterUserId)))
		i += copy(dAtA[i:], m.TwitterUserId)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Username) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if m.FollowersCount != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.FollowersCount))
	}
	if m.TweetCount != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.TweetCount))
	}
	if m.TwitterCreatedAt != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.TwitterCreatedAt))
	}
	if m.Amount != 0 {
		dAtA[i] = 0x3d
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Amount))))
		i += 4
	}
	if m.CreatedAt != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.CreatedAt))
	}
	if len(m.Misesid) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(len(m.Misesid)))
		i += copy(dAtA[i:], m.Misesid)
	}
	return i, nil
}

func (m *Airdrop) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Airdrop) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Coin != 0 {
		dAtA[i] = 0xd
		i++
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Coin))))
		i += 4
	}
	if m.CreatedAt != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.CreatedAt))
	}
	if m.FinishAt != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.FinishAt))
	}
	if len(m.Status) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(len(m.Status)))
		i += copy(dAtA[i:], m.Status)
	}
	return i, nil
}

func (m *GetAirdropInfoRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAirdropInfoRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.CurrentUid))
	}
	return i, nil
}

func (m *GetAirdropInfoResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAirdropInfoResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.Code))
	}
	if m.Twitter != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.Twitter.Size()))
		n7, err7 := m.Twitter.MarshalTo(dAtA[i:])
		if err7 != nil {
			return 0, err7
		}
		i += n7
	}
	if m.Airdrop != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.Airdrop.Size()))
		n8, err8 := m.Airdrop.MarshalTo(dAtA[i:])
		if err8 != nil {
			return 0, err8
		}
		i += n8
	}
	return i, nil
}

func (m *TwitterCallbackRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TwitterCallbackRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.CurrentUid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.CurrentUid))
	}
	if len(m.OauthToken) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(len(m.OauthToken)))
		i += copy(dAtA[i:], m.OauthToken)
	}
	if len(m.OauthVerifier) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(len(m.OauthVerifier)))
		i += copy(dAtA[i:], m.OauthVerifier)
	}
	if m.UserAgent != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.UserAgent.Size()))
		n9, err9 := m.UserAgent.MarshalTo(dAtA[i:])
		if err9 != nil {
			return 0, err9
		}
		i += n9
	}
	if len(m.State) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(len(m.State)))
		i += copy(dAtA[i:], m.State)
	}
	return i, nil
}

func (m *TwitterCallbackResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TwitterCallbackResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(m.Code))
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAirdropsvc(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	return i, nil
}

func encodeVarintAirdropsvc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UserAgent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ua)
	if l > 0 {
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	l = len(m.Ipaddr)
	if l > 0 {
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	l = len(m.Browser)
	if l > 0 {
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	l = len(m.Platform)
	if l > 0 {
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	l = len(m.Os)
	if l > 0 {
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	l = len(m.DeviceId)
	if l > 0 {
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	return n
}

func (m *UserAvatar) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Small)
	if l > 0 {
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	l = len(m.Medium)
	if l > 0 {
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	l = len(m.Large)
	if l > 0 {
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	l = len(m.NftAssetId)
	if l > 0 {
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	return n
}

func (m *UserInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uid != 0 {
		n += 1 + sovAirdropsvc(uint64(m.Uid))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	l = len(m.Misesid)
	if l > 0 {
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	l = len(m.Gender)
	if l > 0 {
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	l = len(m.Mobile)
	if l > 0 {
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	if m.IsFollowed {
		n += 2
	}
	if m.IsBlocked {
		n += 2
	}
	if m.FollowingsCount != 0 {
		n += 1 + sovAirdropsvc(uint64(m.FollowingsCount))
	}
	if m.FansCount != 0 {
		n += 1 + sovAirdropsvc(uint64(m.FansCount))
	}
	if m.LikedCount != 0 {
		n += 1 + sovAirdropsvc(uint64(m.LikedCount))
	}
	if m.NewFansCount != 0 {
		n += 1 + sovAirdropsvc(uint64(m.NewFansCount))
	}
	if m.AvatarUrl != nil {
		l = m.AvatarUrl.Size()
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	if m.IsAirdropped {
		n += 3
	}
	if m.AirdropStatus {
		n += 3
	}
	if m.IsLogined {
		n += 3
	}
	l = len(m.HelpMisesid)
	if l > 0 {
		n += 2 + l + sovAirdropsvc(uint64(l))
	}
	l = len(m.Intro)
	if l > 0 {
		n += 2 + l + sovAirdropsvc(uint64(l))
	}
	return n
}

func (m *PageQuick) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovAirdropsvc(uint64(m.Limit))
	}
	l = len(m.NextId)
	if l > 0 {
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	if m.Total != 0 {
		n += 1 + sovAirdropsvc(uint64(m.Total))
	}
	return n
}

func (m *Page) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalRecords != 0 {
		n += 1 + sovAirdropsvc(uint64(m.TotalRecords))
	}
	if m.PageSize != 0 {
		n += 1 + sovAirdropsvc(uint64(m.PageSize))
	}
	if m.PageNum != 0 {
		n += 1 + sovAirdropsvc(uint64(m.PageNum))
	}
	if m.TotalPage != 0 {
		n += 1 + sovAirdropsvc(uint64(m.TotalPage))
	}
	return n
}

func (m *AirdropTwitterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Misesid)
	if l > 0 {
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	return n
}

func (m *AirdropTwitterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AirdropChannelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AirdropChannelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TwitterFollowRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TwitterFollowResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovAirdropsvc(uint64(m.Code))
	}
	return n
}

func (m *SendTweetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *SendTweetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovAirdropsvc(uint64(m.Code))
	}
	return n
}

func (m *LikeTweetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *LikeTweetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovAirdropsvc(uint64(m.Code))
	}
	return n
}

func (m *ReplyTweetRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ReplyTweetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovAirdropsvc(uint64(m.Code))
	}
	return n
}

func (m *CheckTwitterUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *CheckTwitterUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovAirdropsvc(uint64(m.Code))
	}
	return n
}

func (m *LookupTwitterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *LookupTwitterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovAirdropsvc(uint64(m.Code))
	}
	return n
}

func (m *ChannelInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Misesid)
	if l > 0 {
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	l = len(m.Medium)
	if l > 0 {
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	return n
}

func (m *ChannelInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovAirdropsvc(uint64(m.Code))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	if m.TotalChannelUser != 0 {
		n += 1 + sovAirdropsvc(uint64(m.TotalChannelUser))
	}
	if m.AirdropAmount != 0 {
		n += 5
	}
	l = len(m.MediumUrl)
	if l > 0 {
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	l = len(m.IosLink)
	if l > 0 {
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	l = len(m.IosMediumLink)
	if l > 0 {
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	return n
}

func (m *GetChannelUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Misesid)
	if l > 0 {
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	return n
}

func (m *PageChannelUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovAirdropsvc(uint64(m.Code))
	}
	if len(m.ChannelUsers) > 0 {
		for _, e := range m.ChannelUsers {
			l = e.Size()
			n += 1 + l + sovAirdropsvc(uint64(l))
		}
	}
	if m.Paginator != nil {
		l = m.Paginator.Size()
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	return n
}

func (m *PageChannelUserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Misesid)
	if l > 0 {
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	if m.Paginator != nil {
		l = m.Paginator.Size()
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	return n
}

func (m *ChannelUserInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	l = len(m.ChannelId)
	if l > 0 {
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	if m.ValidState != 0 {
		n += 1 + sovAirdropsvc(uint64(m.ValidState))
	}
	if m.Amount != 0 {
		n += 1 + sovAirdropsvc(uint64(m.Amount))
	}
	l = len(m.TxId)
	if l > 0 {
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	if m.User != nil {
		l = m.User.Size()
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	if m.AirdropState != 0 {
		n += 1 + sovAirdropsvc(uint64(m.AirdropState))
	}
	if m.AirdropTime != 0 {
		n += 1 + sovAirdropsvc(uint64(m.AirdropTime))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovAirdropsvc(uint64(m.CreatedAt))
	}
	if m.ChannelUid != 0 {
		n += 1 + sovAirdropsvc(uint64(m.ChannelUid))
	}
	l = len(m.ChannelMisesid)
	if l > 0 {
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	return n
}

func (m *GetChannelUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovAirdropsvc(uint64(m.Code))
	}
	if m.ChanelUser != nil {
		l = m.ChanelUser.Size()
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	return n
}

func (m *GetTwitterAuthUrlRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovAirdropsvc(uint64(m.CurrentUid))
	}
	if m.UserAgent != nil {
		l = m.UserAgent.Size()
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	return n
}

func (m *GetTwitterAuthUrlResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovAirdropsvc(uint64(m.Code))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	return n
}

func (m *UserTwitterAuth) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TwitterUserId)
	if l > 0 {
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	if m.FollowersCount != 0 {
		n += 1 + sovAirdropsvc(uint64(m.FollowersCount))
	}
	if m.TweetCount != 0 {
		n += 1 + sovAirdropsvc(uint64(m.TweetCount))
	}
	if m.TwitterCreatedAt != 0 {
		n += 1 + sovAirdropsvc(uint64(m.TwitterCreatedAt))
	}
	if m.Amount != 0 {
		n += 5
	}
	if m.CreatedAt != 0 {
		n += 1 + sovAirdropsvc(uint64(m.CreatedAt))
	}
	l = len(m.Misesid)
	if l > 0 {
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	return n
}

func (m *Airdrop) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Coin != 0 {
		n += 5
	}
	if m.CreatedAt != 0 {
		n += 1 + sovAirdropsvc(uint64(m.CreatedAt))
	}
	if m.FinishAt != 0 {
		n += 1 + sovAirdropsvc(uint64(m.FinishAt))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	return n
}

func (m *GetAirdropInfoRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovAirdropsvc(uint64(m.CurrentUid))
	}
	return n
}

func (m *GetAirdropInfoResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovAirdropsvc(uint64(m.Code))
	}
	if m.Twitter != nil {
		l = m.Twitter.Size()
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	if m.Airdrop != nil {
		l = m.Airdrop.Size()
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	return n
}

func (m *TwitterCallbackRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CurrentUid != 0 {
		n += 1 + sovAirdropsvc(uint64(m.CurrentUid))
	}
	l = len(m.OauthToken)
	if l > 0 {
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	l = len(m.OauthVerifier)
	if l > 0 {
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	if m.UserAgent != nil {
		l = m.UserAgent.Size()
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	return n
}

func (m *TwitterCallbackResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovAirdropsvc(uint64(m.Code))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovAirdropsvc(uint64(l))
	}
	return n
}

func sovAirdropsvc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAirdropsvc(x uint64) (n int) {
	return sovAirdropsvc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdropsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAirdropsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdropsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAirdropsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserAgent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdropsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserAgent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserAgent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ua", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ua = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ipaddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ipaddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Browser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Browser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Platform", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Platform = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Os", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Os = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeviceId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeviceId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAirdropsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserAvatar) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdropsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserAvatar: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserAvatar: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Small", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Small = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Medium", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Medium = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Large", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Large = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftAssetId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftAssetId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAirdropsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdropsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			m.Uid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Misesid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Misesid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mobile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mobile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFollowed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFollowed = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBlocked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBlocked = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowingsCount", wireType)
			}
			m.FollowingsCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FollowingsCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FansCount", wireType)
			}
			m.FansCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FansCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikedCount", wireType)
			}
			m.LikedCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LikedCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewFansCount", wireType)
			}
			m.NewFansCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewFansCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvatarUrl", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AvatarUrl == nil {
				m.AvatarUrl = &UserAvatar{}
			}
			if err := m.AvatarUrl.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsAirdropped", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsAirdropped = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AirdropStatus", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AirdropStatus = bool(v != 0)
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsLogined", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsLogined = bool(v != 0)
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HelpMisesid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HelpMisesid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Intro", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Intro = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAirdropsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PageQuick) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdropsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageQuick: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageQuick: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAirdropsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Page) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdropsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Page: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Page: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRecords", wireType)
			}
			m.TotalRecords = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalRecords |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNum", wireType)
			}
			m.PageNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPage", wireType)
			}
			m.TotalPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPage |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAirdropsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AirdropTwitterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdropsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AirdropTwitterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AirdropTwitterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Misesid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Misesid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAirdropsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AirdropTwitterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdropsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AirdropTwitterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AirdropTwitterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAirdropsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AirdropChannelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdropsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AirdropChannelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AirdropChannelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAirdropsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AirdropChannelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdropsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AirdropChannelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AirdropChannelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAirdropsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TwitterFollowRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdropsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TwitterFollowRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TwitterFollowRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAirdropsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TwitterFollowResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdropsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TwitterFollowResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TwitterFollowResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAirdropsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendTweetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdropsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendTweetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendTweetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAirdropsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SendTweetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdropsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SendTweetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SendTweetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAirdropsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LikeTweetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdropsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LikeTweetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LikeTweetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAirdropsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LikeTweetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdropsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LikeTweetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LikeTweetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAirdropsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyTweetRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdropsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyTweetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyTweetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAirdropsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyTweetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdropsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyTweetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyTweetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAirdropsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckTwitterUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdropsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckTwitterUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckTwitterUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAirdropsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CheckTwitterUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdropsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CheckTwitterUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CheckTwitterUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAirdropsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupTwitterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdropsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupTwitterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupTwitterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipAirdropsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LookupTwitterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdropsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LookupTwitterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LookupTwitterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAirdropsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdropsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Misesid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Misesid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Medium", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Medium = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAirdropsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdropsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalChannelUser", wireType)
			}
			m.TotalChannelUser = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalChannelUser |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field AirdropAmount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.AirdropAmount = float32(math.Float32frombits(v))
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MediumUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MediumUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IosLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IosLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IosMediumLink", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IosMediumLink = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAirdropsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdropsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Misesid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Misesid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAirdropsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PageChannelUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdropsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageChannelUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageChannelUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelUsers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelUsers = append(m.ChannelUsers, &ChannelUserInfo{})
			if err := m.ChannelUsers[len(m.ChannelUsers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paginator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Paginator == nil {
				m.Paginator = &Page{}
			}
			if err := m.Paginator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAirdropsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PageChannelUserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdropsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageChannelUserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageChannelUserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Misesid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Misesid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paginator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Paginator == nil {
				m.Paginator = &Page{}
			}
			if err := m.Paginator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAirdropsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelUserInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdropsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelUserInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelUserInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidState", wireType)
			}
			m.ValidState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidState |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.User == nil {
				m.User = &UserInfo{}
			}
			if err := m.User.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AirdropState", wireType)
			}
			m.AirdropState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AirdropState |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AirdropTime", wireType)
			}
			m.AirdropTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AirdropTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelUid", wireType)
			}
			m.ChannelUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChannelUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelMisesid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChannelMisesid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAirdropsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdropsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChanelUser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChanelUser == nil {
				m.ChanelUser = &ChannelUserInfo{}
			}
			if err := m.ChanelUser.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAirdropsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTwitterAuthUrlRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdropsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTwitterAuthUrlRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTwitterAuthUrlRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAgent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserAgent == nil {
				m.UserAgent = &UserAgent{}
			}
			if err := m.UserAgent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAirdropsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTwitterAuthUrlResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdropsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTwitterAuthUrlResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTwitterAuthUrlResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAirdropsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserTwitterAuth) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdropsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserTwitterAuth: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserTwitterAuth: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwitterUserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TwitterUserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FollowersCount", wireType)
			}
			m.FollowersCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FollowersCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TweetCount", wireType)
			}
			m.TweetCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TweetCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TwitterCreatedAt", wireType)
			}
			m.TwitterCreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TwitterCreatedAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Amount = float32(math.Float32frombits(v))
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Misesid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Misesid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAirdropsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Airdrop) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdropsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Airdrop: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Airdrop: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Coin = float32(math.Float32frombits(v))
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinishAt", wireType)
			}
			m.FinishAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinishAt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAirdropsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAirdropInfoRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdropsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAirdropInfoRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAirdropInfoRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAirdropsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAirdropInfoResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdropsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAirdropInfoResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAirdropInfoResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Twitter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Twitter == nil {
				m.Twitter = &UserTwitterAuth{}
			}
			if err := m.Twitter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Airdrop", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Airdrop == nil {
				m.Airdrop = &Airdrop{}
			}
			if err := m.Airdrop.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAirdropsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TwitterCallbackRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdropsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TwitterCallbackRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TwitterCallbackRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentUid", wireType)
			}
			m.CurrentUid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentUid |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OauthToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OauthToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OauthVerifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OauthVerifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserAgent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UserAgent == nil {
				m.UserAgent = &UserAgent{}
			}
			if err := m.UserAgent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAirdropsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TwitterCallbackResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAirdropsvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TwitterCallbackResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TwitterCallbackResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAirdropsvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAirdropsvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAirdropsvc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAirdropsvc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAirdropsvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAirdropsvc
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthAirdropsvc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAirdropsvc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAirdropsvc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthAirdropsvc
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAirdropsvc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAirdropsvc   = fmt.Errorf("proto: integer overflow")
)
